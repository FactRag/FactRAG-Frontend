This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-12-01T20:05:48.260Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
src/
  components/
    feedback/
      AuthSection.tsx
      FeedbackItemWithVoting.tsx
      FeedbackSection.tsx
    history/
      HistoryItem.tsx
      HistorySidebar.tsx
    layout/
      Footer.tsx
      Header.tsx
    search/
      SearchBar.tsx
      SearchSuggestion.tsx
    verification/
      modals/
        DocumentCard.tsx
        DocumentModal.tsx
      AnalysisCard..tsx
      EmojiStats.tsx
      FeedBackSubmitSection.tsx
      GooglePageCard.tsx
      GoogleResultsSection.tsx
      ModelResponse.tsx
      PromptSection.tsx
      QuestionTable.tsx
      ResponseDistribution.tsx
      ScoreLegend.tsx
      TripleDisplay.tsx
      VerificationProcess.tsx
    AuthCallback.tsx
  contexts/
    AuthContext.tsx
  hooks/
    useDocumentContent.ts
    useOnClickOutside.ts
    useResponsive.ts
    useSearchData.ts
  pages/
    HomePage.tsx
    ResultsPage.tsx
  services/
    auth.ts
    feedbackService.ts
    HistoryService.ts
  types/
    history.ts
    index.ts
    search.ts
    verification.ts
  utils/
    calculateModelStats.ts
    promptGenerators.ts
    storage.ts
  App.tsx
  config.ts
  index.css
  index.tsx
  logo.svg
  react-app-env.d.ts
  reportWebVitals.ts
  setupTests.ts
.eslintrc
.gitignore
.prettierrc.json
package.json
postcss.config.js
react-project-structure.json
README.md
repomix.config.json
tailwind.config.js
tsconfig.json

================================================================
Repository Files
================================================================

================
File: src/components/feedback/AuthSection.tsx
================
import { useAuth } from '../../contexts/AuthContext'
import React, { useEffect, useState } from 'react'
import { LogIn, Mail } from 'lucide-react'
import { Button, Label, TextInput } from 'flowbite-react'

export const AuthSection = () => {
  const {
    isAuthenticated,
    loginWithEmail,
    socialLogin
  } = useAuth()

  const [showEmailLogin, setShowEmailLogin] = useState(false)
  const [email, setEmail] = useState('')
  const [password, setPassword] = useState('')

  const handleEmailLogin = async (e: React.FormEvent) => {
    e.preventDefault()
    try {
      await loginWithEmail({ email, password })
      setEmail('')
      setPassword('')
    } catch (error) {
      console.error('Login failed:', error)
    }
  }

  useEffect(() => {
    if (isAuthenticated) {
      setShowEmailLogin(false)
      setEmail('')
      setPassword('')
    }
  }, [isAuthenticated])

  return (
    <div className='p-6 space-y-4 feedback-item'>
      <div className='text-center mb-4'>
        <LogIn className='w-12 h-12 mx-auto text-gray-400 mb-2' />
        <h3 className='text-lg font-medium text-gray-900'>Sign in to continue</h3>
        <p className='text-sm text-gray-500'>Authentication required for feedback</p>
      </div>

      {!showEmailLogin ? (
        <>
          <div className='space-y-3'>
            <Button
              color='light'
              className='w-full'
              onClick={() => socialLogin('google')}
            >
              <img src='/google-icon.svg' className='w-5 h-5 mr-2' alt='Google' />
              Continue with Google
            </Button>

            <Button
              color='light'
              className='w-full'
              onClick={() => socialLogin('orcid')}
            >
              <img src='/orcid-icon.svg' className='w-5 h-5 mr-2' alt='ORCID' />
              Continue with ORCID
            </Button>

            <div className='relative flex items-center justify-center'>
              <div className='absolute w-full border-t border-gray-300'></div>
              <div className='relative bg-white px-4'>
                <span className='text-sm text-gray-500'>Or</span>
              </div>
            </div>

            <Button
              color='light'
              className='w-full'
              onClick={() => setShowEmailLogin(true)}
            >
              <Mail className='w-5 h-5 mr-2' />
              Continue with Email
            </Button>
          </div>
        </>
      ) : (
        <form onSubmit={handleEmailLogin} className='space-y-4'>
          <div>
            <Label htmlFor='email'>Email</Label>
            <TextInput
              id='email'
              type='email'
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              required
            />
          </div>
          <div>
            <Label htmlFor='password'>Password</Label>
            <TextInput
              id='password'
              type='password'
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              required
            />
          </div>
          <Button type='submit' color='dark' className='w-full'>
            Sign In
          </Button>
          <Button
            color='light'
            className='w-full'
            onClick={() => setShowEmailLogin(false)}
          >
            Back to social login
          </Button>
        </form>
      )}
    </div>
  )
}

================
File: src/components/feedback/FeedbackItemWithVoting.tsx
================
import React from 'react'
import { Avatar } from 'flowbite-react'
import { ChevronDown, ChevronUp } from 'lucide-react'

interface VotingProps {
  upvotes: number;
  downvotes: number;
  hasUserVoted?: {
    upvoted?: boolean;
    downvoted?: boolean;
  };
  isAuthenticated: boolean;
  isLoading: boolean;
  onVote: (isUpvote: boolean) => void;
}

const VotingSection: React.FC<VotingProps> = ({
                                                upvotes,
                                                downvotes,
                                                hasUserVoted,
                                                isAuthenticated,
                                                isLoading,
                                                onVote
                                              }) => {
  const voteScore = upvotes - downvotes
  const getVoteColor = (isUpvote: boolean) => {
    if (!hasUserVoted) return 'text-gray-500'
    return (isUpvote ? hasUserVoted.upvoted : hasUserVoted.downvoted)
      ? 'text-purple-600'
      : 'text-gray-500'
  }

  return (
    <div className='flex flex-col items-center justify-center space-y-1'>
      <button
        className={`p-1 rounded-lg hover:bg-gray-100 transition-colors ${getVoteColor(true)}`}
        onClick={() => onVote(true)}
        disabled={!isAuthenticated || isLoading}
        title={isAuthenticated ? 'Upvote' : 'Login to vote'}
      >
        <ChevronUp className='w-5 h-5' />
      </button>

      <span
        className={`text-sm font-medium ${voteScore > 0 ? 'text-purple-600' : voteScore < 0 ? 'text-red-600' : 'text-gray-600'}`}>
        {voteScore}
      </span>

      <button
        className={`p-1 rounded-lg hover:bg-gray-100 transition-colors ${getVoteColor(false)}`}
        onClick={() => onVote(false)}
        disabled={!isAuthenticated || isLoading}
        title={isAuthenticated ? 'Downvote' : 'Login to vote'}
      >
        <ChevronDown className='w-5 h-5' />
      </button>
    </div>
  )
}

// Example usage in the feedback list:
const FeedbackItemWithVoting: React.FC<{
  feedback: any;
  isAuthenticated: boolean;
  isLoading: boolean;
  onVote: (feedbackId: number, isUpvote: boolean) => void;
}> = ({ feedback, isAuthenticated, isLoading, onVote }) => {
  return (
    <div className='feedback-item bg-gray-50 p-3 rounded-lg shadow-sm hover:shadow-md transition-shadow'>
      <div className='flex gap-4'>
        {/* Voting Section */}
        <VotingSection
          upvotes={feedback.upvotes}
          downvotes={feedback.downvotes}
          hasUserVoted={feedback.hasUserVoted}
          isAuthenticated={isAuthenticated}
          isLoading={isLoading}
          onVote={(isUpvote) => onVote(feedback.id, isUpvote)}
        />

        {/* Content Section */}
        <div className='flex-1'>
          {/* User Info */}
          <div className='flex items-center justify-between mb-2'>
            <div className='flex items-center space-x-2'>
              {feedback.user.avatar ?
                <Avatar img={feedback.user.avatar} size='sm' bordered />
                :
                <Avatar
                  placeholderInitials=
                    {feedback.user.username ? feedback.user.username.charAt(0).toUpperCase() : 'R'}
                  size='sm' bordered />
              }
              <div>
                <p className='text-sm font-medium text-gray-900'>
                  {feedback.user.username}
                </p>
                <p className='text-xs text-gray-500'>
                  {
                    new Date(feedback.created_at).toLocaleDateString(undefined, {
                      year: 'numeric',
                      month: 'short',
                      day: 'numeric',
                      hour: '2-digit',
                      minute: '2-digit',
                      hour12: false
                    })
                  }
                </p>
              </div>
            </div>
            <span className='text-xl' title={feedback.feedback_type}>
              {feedback.emoji}
            </span>
          </div>

          {/* Feedback Content */}
          {feedback.comment && (
            <p className='text-sm text-gray-600 mt-2 break-words'>
              {feedback.comment}
            </p>
          )}
        </div>
      </div>
    </div>
  )
}

export default FeedbackItemWithVoting

================
File: src/components/feedback/FeedbackSection.tsx
================
import React, { memo, useCallback, useEffect, useRef, useState } from 'react'
import { Alert, Button, Label, TextInput } from 'flowbite-react'
import { MessageCircle, X } from 'lucide-react'
import { useAuth } from '../../contexts/AuthContext'
import { API_BASE_URL } from '../../config'
import { Feedback, FeedbackStats, FeedbackType } from '../../types'
import FeedbackItemWithVoting from './FeedbackItemWithVoting'
import EmojiStats from '../verification/EmojiStats'
import { FeedbackSubmitSection } from '../verification/FeedBackSubmitSection'
import { AuthSection } from './AuthSection'

interface FeedbackSectionProps {
  searchTerm: string;
  dataset: string;
}
const FeedbackSection: React.FC<FeedbackSectionProps> = ({ searchTerm, dataset }) => {
  // Auth hook
  const { isAuthenticated, user, socialLogin } = useAuth()

  const [isVisible, setIsVisible] = useState(false)
  const [isOpen, setIsOpen] = useState(false)
  const [activeTab, setActiveTab] = useState('submit')
  const [selectedEmoji, setSelectedEmoji] = useState<FeedbackType | ''>('')
  const [comment, setComment] = useState('')
  const [isPublic, setIsPublic] = useState(true)
  const [stats, setStats] = useState<FeedbackStats>({
    agree: 0,
    disagree: 0,
    uncertain: 0,
    total: 0
  })
  const [feedbacks, setFeedbacks] = useState<Feedback[]>([])
  const [isLoading, setIsLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)

  const popupRef = useRef<HTMLDivElement>(null)

  // Scroll visibility handler
  useEffect(() => {
    const handleScroll = () => {
      const scrolled = window.scrollY > 100
      setIsVisible(scrolled)
    }

    window.addEventListener('scroll', handleScroll)
    return () => window.removeEventListener('scroll', handleScroll)
  }, [])

  // Load data when popup opens
  useEffect(() => {
    if (isOpen) {
      loadData().then(r => r)
    }
  }, [isOpen])

  // Close on outside click
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (popupRef.current && !popupRef.current.contains(event.target as Node)) {
        setIsOpen(false)
      }
    }

    document.addEventListener('mousedown', handleClickOutside)
    return () => document.removeEventListener('mousedown', handleClickOutside)
  }, [])

  const loadData = async () => {
    setIsLoading(true)
    setError(null)

    try {
      let headers = {}
      if (isAuthenticated) {
        headers = {
          'Authorization': `Bearer ${localStorage.getItem('access_token')}`
        }
      }
      // Load feedback stats
      const statsResponse = await fetch(
        `${API_BASE_URL}/api/feedback/stats/?search=${encodeURIComponent(searchTerm)}&dataset=${encodeURIComponent(dataset)}`,
        {
          headers: headers
        }
      )

      // Load feedback history
      const feedbacksResponse = await fetch(
        `${API_BASE_URL}/api/feedback/list/?search=${encodeURIComponent(searchTerm)}&dataset=${encodeURIComponent(dataset)}`,
        {
          headers: headers
        }
      )

      if (!statsResponse.ok || !feedbacksResponse.ok) {
        throw new Error('Failed to load feedback data')
      }

      const statsData = await statsResponse.json()
      const feedbacksData = await feedbacksResponse.json()

      setStats(statsData)
      setFeedbacks(feedbacksData)
    } catch (err) {
      setError('Failed to load feedback data')
      console.error('Data loading failed:', err)
    } finally {
      setIsLoading(false)
    }
  }

  const handleSubmit = useCallback(async () => {
    if (!isAuthenticated || !selectedEmoji) return

    setIsLoading(true)
    setError(null)

    try {
      const response = await fetch(`${API_BASE_URL}/api/feedback/submit/`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('access_token')}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          searchTerm,
          dataset,
          feedback: selectedEmoji,
          comment,
          isPublic
        })
      })

      if (!response.ok) {
        throw new Error('Failed to submit feedback')
      }

      setComment('')
      setSelectedEmoji('')
      setIsPublic(true)
      setActiveTab('feedback')
      await loadData()
    } catch (err) {
      setError('Failed to submit feedback')
    } finally {
      setIsLoading(false)
    }
  }, [isAuthenticated, selectedEmoji, searchTerm, dataset, comment, isPublic])

  const handleVote = async (feedbackId: number, isUpvote: boolean) => {
    if (!isAuthenticated) return

    try {
      const response = await fetch(`${API_BASE_URL}/api/feedback/vote/`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('access_token')}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          feedbackId,
          isUpvote
        })
      })

      if (!response.ok) {
        throw new Error('Failed to register vote')
      }

      await loadData() // Refresh feedback list
    } catch (err) {
      setError('Failed to register vote')
    }
  }

  const FeedbackList = () => (
    <div className='p-4 space-y-4'>
      {/* Stats Section remains the same */}
      <EmojiStats stats={{
        agree: stats.agree,
        disagree: stats.disagree,
        uncertain: stats.uncertain
      }} />

      {/* Error Alert remains the same */}
      {error && (
        <Alert color='failure' onDismiss={() => setError(null)}>
          {error}
        </Alert>
      )}

      {/* Loading State remains the same */}
      {isLoading ? (
        <div className='text-center py-8'>
          <div className='loading-spinner mx-auto' />
        </div>
      ) : (
        <div className='space-y-3'>
          {feedbacks.length === 0 ? (
            <div className='text-center py-6 text-gray-500'>
              No feedback yet. Be the first to share your thoughts!
            </div>
          ) : (
            feedbacks.map((feedback: Feedback) => (
              <FeedbackItemWithVoting
                key={feedback.id}
                feedback={feedback}
                isAuthenticated={isAuthenticated}
                isLoading={isLoading}
                onVote={handleVote}
              />
            ))
          )}
        </div>
      )}
    </div>
  )
  return (
    <div className='fixed bottom-6 right-6 z-50'>
      {/* Feedback Button */}
      <div
        className={`transition-all duration-300 transform ${
          isVisible ? 'translate-y-0 opacity-100' : 'translate-y-20 opacity-0'
        }`}
      >
        <Button
          color='purple'
          size='lg'
          pill
          onClick={() => setIsOpen(!isOpen)}
          className='shadow-lg hover:shadow-xl group'
        >
          <MessageCircle className='w-5 h-5 mr-2 group-hover:scale-110 transition-transform' />
          Feedback
        </Button>
      </div>

      {/* Feedback Panel */}
      {isOpen && (
        <div
          ref={popupRef}
          className='feedback-popup absolute bottom-16 right-0 w-96 bg-white rounded-lg shadow-xl border'
        >
          {/* Panel Header */}
          <div className='flex items-center justify-between p-4 border-b'>
            <div className='flex space-x-4'>
              <button
                onClick={() => setActiveTab('submit')}
                className={`px-3 py-1 rounded-full text-sm font-medium transition-colors ${
                  activeTab === 'submit'
                    ? 'bg-purple-100 text-purple-700'
                    : 'text-gray-500 hover:text-gray-700'
                }`}
              >
                Submit
              </button>
              <button
                onClick={() => setActiveTab('feedback')}
                className={`px-3 py-1 rounded-full text-sm font-medium transition-colors ${
                  activeTab === 'feedback'
                    ? 'bg-purple-100 text-purple-700'
                    : 'text-gray-500 hover:text-gray-700'
                }`}
              >
                Feedback
              </button>
            </div>
            <button
              onClick={() => setIsOpen(false)}
              className='text-gray-400 hover:text-gray-600 transition-colors p-1 rounded-full hover:bg-gray-100'
              aria-label='Close feedback panel'
            >
              <X className='w-5 h-5' />
            </button>
          </div>

          {/* Panel Content */}
          <div className='max-h-[70vh] overflow-y-auto'>
            {activeTab === 'submit' ? (
              !isAuthenticated ? (
                <AuthSection />
              ) : (
                <FeedbackSubmitSection
                  selectedEmoji={selectedEmoji}
                  setSelectedEmoji={setSelectedEmoji}
                  comment={comment}
                  setComment={setComment}
                  isPublic={isPublic}
                  setIsPublic={setIsPublic}
                  handleSubmit={handleSubmit}
                  isLoading={isLoading}
                />
              )
            ) : (
              <FeedbackList />
            )}
          </div>
        </div>
      )}
    </div>
  )
}

export default memo(FeedbackSection)

================
File: src/components/history/HistoryItem.tsx
================
import React, { memo } from 'react'
import { Link } from 'react-router-dom'
import { Badge } from 'flowbite-react'
import { SearchHistoryItem } from '../../types/history'
import { HistoryService } from '../../services/HistoryService'

interface HistoryItemProps {
  item: SearchHistoryItem;
  datasetColor: string;
}

export const HistoryItem = memo(({ item, datasetColor }: HistoryItemProps) => (
  <Link
    to={`/results?search=${encodeURIComponent(item.searchTerm)}&dataset=${encodeURIComponent(item.dataset)}`}
    className='block bg-white border border-gray-200 rounded-lg shadow-sm hover:shadow-md transition-shadow duration-200'
    data-testid='history-item'
  >
    <div className='p-4'>
      <div className='text-sm font-medium text-gray-900 line-clamp-2 mb-2'>
        {item.humanReadable || item.searchTerm}
      </div>
      <div className='flex items-center text-xs text-gray-500'>
        <Badge color={datasetColor}>
          {item.dataset.charAt(0).toUpperCase() + item.dataset.slice(1)}
        </Badge>
        <span className='mx-2'>•</span>
        <span>{HistoryService.formatDate(item.timestamp)}</span>
      </div>
    </div>
  </Link>
))

HistoryItem.displayName = 'HistoryItem'

================
File: src/components/history/HistorySidebar.tsx
================
import React, { useCallback, useEffect } from 'react'
import { Button } from 'flowbite-react'
import { Link } from 'react-router-dom'
import { HiArrowLeft, HiClock, HiMenu, HiTrash, HiX } from 'react-icons/hi'
import { SearchHistoryItem } from '../../types/history'
import { HistoryService } from '../../services/HistoryService'
import { useResponsive } from '../../hooks/useResponsive'
import { HistoryItem } from './HistoryItem'

interface HistorySidebarProps {
  history: SearchHistoryItem[];
  setHistory: (history: SearchHistoryItem[]) => void;
}

export const HistorySidebar: React.FC<HistorySidebarProps> = ({
                                                                history,
                                                                setHistory
                                                              }) => {
  const isMobile = useResponsive(768)
  const [isOpen, setIsOpen] = React.useState(!isMobile)

  useEffect(() => {
    loadHistory()
  }, [])

  useEffect(() => {
    setIsOpen(!isMobile)
  }, [isMobile])

  const loadHistory = useCallback(() => {
    setHistory(HistoryService.getHistory())
  }, [setHistory])

  const clearHistory = useCallback(() => {
    if (window.confirm('Are you sure you want to clear your search history?')) {
      HistoryService.clearHistory()
      setHistory([])
    }
  }, [setHistory])

  const getDatasetColor = useCallback((dataset: string): string => {
    const colorMap: Record<string, string> = {
      factbench: 'blue',
      dbpedia: 'gray',
      default: 'red'
    }
    return colorMap[dataset.toLowerCase()] || colorMap.default
  }, [])

  const renderSidebarContent = () => (
    <div className='flex flex-col h-full'>
      {/* Header */}
      <div className='p-4 border-b bg-gray-50'>
        <div className='flex items-center justify-between'>
          <h2 className='text-lg font-semibold text-gray-800 flex items-center gap-2'>
            <HiClock className='w-5 h-5 text-gray-600' />
            Search History
          </h2>
          {isMobile && (
            <button
              onClick={() => setIsOpen(false)}
              className='p-2 text-gray-500 hover:text-gray-700 rounded-lg hover:bg-gray-100 transition-colors duration-200'
              aria-label='Close sidebar'
            >
              <HiX className='w-5 h-5' />
            </button>
          )}
        </div>
      </div>

      {/* Back to Search Button */}
      <div className='p-4'>
        <Link to='/'>
          <Button color='gray' className='w-full'>
            <HiArrowLeft className='w-4 h-4' />
            <span className='ml-2'>Back to Search</span>
          </Button>
        </Link>
      </div>

      {/* History List */}
      <div className='flex-1 overflow-y-auto p-4 space-y-2'>
        {history.length === 0 ? (
          <div className='text-center py-8' data-testid='empty-history'>
            <HiClock className='w-12 h-12 mx-auto text-gray-400 mb-3' />
            <p className='text-gray-500 text-sm'>No search history yet</p>
          </div>
        ) : (
          history.map((item, index) => (
            <HistoryItem
              key={`${item.searchTerm}-${item.timestamp}-${index}`}
              item={item}
              datasetColor={getDatasetColor(item.dataset)}
            />
          ))
        )}
      </div>

      {/* Clear History Button */}
      <div className='p-4 border-t bg-gray-50 mt-auto'>
        <Button
          color='failure'
          onClick={clearHistory}
          className='w-full'
          data-testid='clear-history-button'
        >
          <HiTrash className='w-4 h-4' />
          <span className='ml-2'>Clear History</span>
        </Button>
      </div>
    </div>
  )

  return (
    <>
      {/* Mobile Toggle Button */}
      {isMobile && !isOpen && (
        <button
          onClick={() => setIsOpen(true)}
          className='fixed top-4 left-4 z-50 md:hidden bg-white p-2 rounded-lg shadow-lg border border-gray-200 hover:bg-gray-50 transition-colors duration-200 group'
          aria-label='Open sidebar'
          data-testid='mobile-toggle'
        >
          <div className='relative'>
            <HiMenu className='w-5 h-5 text-gray-600 group-hover:text-gray-800' />
            {history.length > 0 && (
              <span
                className='absolute -top-2 -right-2 bg-red-500 text-white text-xs rounded-full w-4 h-4 flex items-center justify-center'>
                {history.length}
              </span>
            )}
          </div>
        </button>
      )}

      {/* Sidebar */}
      <aside
        className={`
          w-64 bg-white border-r h-screen flex flex-col
          fixed md:sticky top-0 z-40 shadow-xl md:shadow-none
          transition-transform duration-300 ease-in-out
          ${isOpen ? 'translate-x-0' : '-translate-x-full'}
          md:translate-x-0
        `}
        data-testid='history-sidebar'
      >
        {renderSidebarContent()}
      </aside>

      {/* Mobile Overlay */}
      {isMobile && isOpen && (
        <div
          className='fixed inset-0 bg-black bg-opacity-50 z-30 md:hidden backdrop-blur-sm'
          onClick={() => setIsOpen(false)}
          data-testid='mobile-overlay'
        />
      )}
    </>
  )
}

================
File: src/components/layout/Footer.tsx
================
// src/components/layout/Footer.tsx
import React from 'react'
import { Footer as FlowbiteFooter } from 'flowbite-react'

export const Footer = () => {
  return (
    <FlowbiteFooter
      container
      className="bg-white border-t border-gray-200 py-4 mt-8"
    >
      <div className="container mx-auto px-4">
        <p className="text-center text-sm text-gray-600">
          © 2024 Knowledge Graph Verification System. All rights reserved. The
          meme is modified form of react-on-lambda by{' '}
          <a
            href="https://github.com/sultan99/react-on-lambda"
            className="text-blue-500 hover:underline"
          >
            Sultan
          </a>
          .
        </p>
      </div>
    </FlowbiteFooter>
  )
}

================
File: src/components/layout/Header.tsx
================
import React from 'react'
import { Navbar } from 'flowbite-react'

interface LogoItemProps {
  src: string;
  alt: string;
  tooltip: string;
}

const LogoItem: React.FC<LogoItemProps> = ({ src, alt, tooltip }) => (
  <div className='relative flex items-center'>
    <img
      src={src}
      alt={alt}
      className='h-8 md:h-10 w-auto hover:opacity-80 transition-opacity cursor-pointer'
    />
  </div>
)

export const Header: React.FC = () => {
  const logos = [
    {
      src: '/images/unipd.png',
      alt: 'University of Padua logo',
      tooltip: 'University of Padua'
    },
    {
      src: '/images/dei.png',
      alt: 'DEI logo',
      tooltip: 'Department of Information Engineering'
    },
    {
      src: '/images/iiiahub.png',
      alt: 'IIIAHub logo',
      tooltip: 'Intelligent Interactive Information Access Hub'
    }
  ]

  return (
    <Navbar
      className='bg-white border-b shadow-sm py-4'
      fluid
    >
      <div className='container mx-auto'>
        <div className='w-full flex flex-wrap justify-center items-center gap-6 md:gap-10'>
          {logos.map((logo, index) => (
            <LogoItem
              key={index}
              src={logo.src}
              alt={logo.alt}
              tooltip={logo.tooltip}
            />
          ))}
        </div>
      </div>
    </Navbar>
  )
}

export default Header

================
File: src/components/search/SearchBar.tsx
================
import React, { useCallback, useRef, useState } from 'react'
import { useNavigate } from 'react-router-dom'
import { TextInput } from 'flowbite-react'
import { useOnClickOutside } from '../../hooks/useOnClickOutside'
import { useSearchData } from '../../hooks/useSearchData'
import SearchSuggestion from './SearchSuggestion'
import type { SearchMatch } from '../../types/search'

export const SearchBar: React.FC = () => {
  const [query, setQuery] = useState('')
  const [showSuggestions, setShowSuggestions] = useState(false)
  const [selectedMatch, setSelectedMatch] = useState<SearchMatch | null>(null)
  const navigate = useNavigate()
  const suggestionsRef = useRef<HTMLDivElement>(null)

  const matches = useSearchData(query)

  useOnClickOutside(suggestionsRef, () => setShowSuggestions(false))

  const handleSubmit = useCallback((e: React.FormEvent) => {
    e.preventDefault()
    if (selectedMatch) {
      navigate(`/results?search=${selectedMatch.identifier}&dataset=${selectedMatch.dataset}`)
    }
  }, [navigate, selectedMatch])

  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value
    setQuery(value)
    setShowSuggestions(true)
    setSelectedMatch(null)
  }, [])

  const handleMatchSelect = useCallback((match: SearchMatch) => {
    setQuery(match.text)
    setSelectedMatch(match)
    setShowSuggestions(false)
  }, [])

  return (
    <div className='relative'>
      <form onSubmit={handleSubmit} className='flex items-center max-w-4xl mx-auto' autoComplete='off'>
        <TextInput
          value={query}
          onChange={handleInputChange}
          placeholder='Search for a fact to verify...'
          className='w-full'
          data-testid='search-input'
        />
        <button
          type='submit'
          className='p-2.5 ms-2 text-sm font-medium text-white bg-blue-700 rounded-lg border border-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 disabled:opacity-50 disabled:cursor-not-allowed'
          disabled={!selectedMatch}
          data-testid='search-submit'
        >
          <svg
            className='w-4 h-4'
            aria-hidden='true'
            xmlns='http://www.w3.org/2000/svg'
            fill='none'
            viewBox='0 0 20 20'
          >
            <path
              stroke='currentColor'
              strokeLinecap='round'
              strokeLinejoin='round'
              strokeWidth='2'
              d='m19 19-4-4m0-7A7 7 0 1 1 1 8a7 7 0 0 1 14 0Z'
            />
          </svg>
          <span className='sr-only'>Search</span>
        </button>
      </form>

      {showSuggestions && matches.length > 0 && (
        <div
          ref={suggestionsRef}
          className='absolute w-full bg-white border border-gray-200 rounded-lg mt-1 shadow-lg z-50 overflow-y-auto max-h-96'
          data-testid='suggestions-container'
        >
          {matches.map((match, index) => (
            <SearchSuggestion
              key={`${match.dataset}-${match.identifier}-${index}`}
              match={match}
              onSelect={handleMatchSelect}
            />
          ))}
        </div>
      )}
    </div>
  )
}

================
File: src/components/search/SearchSuggestion.tsx
================
import React, { memo } from 'react'
import type { SearchMatch } from '../../types/search'

interface SearchSuggestionProps {
  match: SearchMatch;
  onSelect: (match: SearchMatch) => void;
}

const SearchSuggestion: React.FC<SearchSuggestionProps> = memo(({ match, onSelect }) => (
  <button
    onClick={() => onSelect(match)}
    className='w-full px-4 py-2 text-left hover:bg-gray-100 focus:outline-none focus:bg-gray-100'
  >
    <div className='flex justify-between items-center gap-2'>
      <span className='text-gray-900 truncate'>{match.text}</span>
      <div className='flex items-center gap-2 flex-shrink-0'>
        <span className='bg-gray-100 text-gray-800 text-xs font-medium px-2.5 py-0.5 rounded border border-gray-400'>
          {match.dataset}
        </span>
        <span className='text-xs text-gray-400 min-w-[5ch] text-right whitespace-pre'>
          {match.identifier.length > 5 ? match.identifier.slice(0, 5) : match.identifier.padEnd(5, '')}
        </span>
      </div>
    </div>
  </button>
))

SearchSuggestion.displayName = 'SearchSuggestion'

export default SearchSuggestion

================
File: src/components/verification/modals/DocumentCard.tsx
================
import React from 'react'
import { SelectedDoc } from '../../../types/verification'
import { HiEye, HiOutlineDocumentText } from 'react-icons/hi'

export const DocumentCard: React.FC<{
  doc: SelectedDoc;
  index: number;
  onView: () => void;
}> = ({ doc, index, onView }) => {
  const getFileName = (fileId: string) => {
    return fileId.split('/').pop() || fileId
  }

  return (
    <div
      className='bg-white rounded-lg border border-gray-200 hover:shadow-md transition-all p-4 flex flex-col items-center cursor-pointer'
      onClick={onView}
    >
      <div className='text-blue-600 mb-2'>
        <HiOutlineDocumentText className='w-8 h-8' />
      </div>

      <p className='text-xs text-gray-500 text-center mb-2'>
        Document {index + 1}
      </p>

      <p className='text-sm text-gray-900 font-medium mb-3 text-center truncate w-full'>
        {getFileName(doc.file_id)}
      </p>

      <button
        className='flex items-center justify-center text-xs text-blue-600 hover:text-blue-800 transition-colors'>
        <HiEye className='w-4 h-4 mr-1' />
        View Content
      </button>
    </div>
  )
}

================
File: src/components/verification/modals/DocumentModal.tsx
================
// components/verification/modals/DocumentModal.tsx
import React from 'react'
import { Modal } from 'flowbite-react'

interface DocumentModalProps {
  isOpen: boolean;
  onClose: () => void;
  fileId: string;
  content: string;
  isLoading: boolean;
}

export const DocumentModal: React.FC<DocumentModalProps> = ({
                                                              isOpen,
                                                              onClose,
                                                              fileId,
                                                              content,
                                                              isLoading
                                                            }) => {
  const getFileName = (fileId: string) => fileId.split('/').pop() || fileId

  return (
    <Modal
      show={isOpen}
      onClose={onClose}
      size='4xl'
      theme={{
        content: {
          base: 'relative h-[80vh] w-full rounded-lg bg-white shadow flex flex-col'
        }
      }}
    >
      <Modal.Header>
        <div className='text-lg font-semibold text-gray-900 truncate'>
          {fileId && getFileName(fileId)}
        </div>
      </Modal.Header>

      <Modal.Body className='p-4 flex-grow overflow-hidden relative'>
        {isLoading ? (
          <div className='flex items-center justify-center h-full'>
            <div className='animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600' />
          </div>
        ) : (
          <div className='h-full overflow-auto'>
                <pre className='text-sm text-gray-700 whitespace-pre-wrap font-mono bg-gray-50 p-4 rounded-lg'>
                    {content}
                    </pre>
          </div>
        )}
      </Modal.Body>
    </Modal>
  )
}

================
File: src/components/verification/AnalysisCard..tsx
================
import { Badge, Card } from 'flowbite-react'
import { HiInformationCircle } from 'react-icons/hi'
import { Analysis } from '../../types/verification'
import React from 'react'

export const AnalysisCard: React.FC<{ analysis: Analysis }> = ({ analysis }) => (
  <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
    {/* Left Column */}
    <Card className="p-4 bg-white shadow-sm">
      <div className="space-y-3">
        <h3 className="text-lg font-bold text-gray-800 mb-2 flex items-center">
          <HiInformationCircle className="w-5 h-5 mr-2 text-blue-500" />
          Error Analysis
        </h3>
        <div className="flex items-center space-x-2">
          <Badge color="purple" className="whitespace-nowrap">
            {analysis.error_category}
          </Badge>
          <p className="text-sm text-gray-600">{analysis.error_detail}</p>
        </div>
        {analysis.error_reason && (
          <div className="mt-2 text-sm text-gray-600 bg-gray-50 p-3 rounded-lg">
            {analysis.error_reason}
          </div>
        )}
      </div>
    </Card>

    {/* Right Column */}
    <Card className="p-4 bg-white shadow-sm">
      <div className="space-y-3">
        <h3 className="text-lg font-bold text-gray-800 mb-2 flex items-center">
          <HiInformationCircle className="w-5 h-5 mr-2 text-blue-500" />
          Classification
        </h3>
        <div className="grid grid-cols-3 gap-2">
          <div>
            <Badge color="blue">Category</Badge>
            <p className="text-sm mt-1">{analysis.category}</p>
          </div>
          <div>
            <Badge color="green">Stratum</Badge>
            <p className="text-sm mt-1">{analysis.stratum}</p>
          </div>
          <div>
            <Badge color="yellow">Topic</Badge>
            <p className="text-sm mt-1">{analysis.topic}</p>
          </div>
        </div>
      </div>
    </Card>
  </div>
);

================
File: src/components/verification/EmojiStats.tsx
================
import React from 'react'
import { Card } from 'flowbite-react'

interface EmojiStatsProps {
  stats: {
    agree: number;
    disagree: number;
    uncertain: number;
  };
}

const CircularProgress: React.FC<{
  percentage: number;
  color: string;
  size?: string;
}> = ({ percentage, color, size = 'h-10 w-10' }) => (
  <div className={`${size} relative`}>
    <svg className='w-full h-full' viewBox='0 0 36 36'>
      {/* Background circle */}
      <circle
        cx='18'
        cy='18'
        r='16'
        fill='none'
        className='stroke-current text-gray-100'
        strokeWidth='3'
      />
      {/* Progress circle */}
      <circle
        cx='18'
        cy='18'
        r='16'
        fill='none'
        className={`stroke-current ${color}`}
        strokeWidth='3'
        strokeDasharray={`${percentage} 100`}
        strokeDashoffset='0'
        strokeLinecap='round'
        transform='rotate(-90 18 18)'
      />
    </svg>
  </div>
)

const EmojiStats: React.FC<EmojiStatsProps> = ({ stats }) => {
  const total = stats.agree + stats.disagree + stats.uncertain

  const statItems = [
    {
      emoji: '👍',
      label: 'Positive',
      count: stats.agree,
      color: 'text-green-400',
      bgColor: 'bg-green-50',
      borderColor: 'border-green-200'
    },
    {
      emoji: '😐',
      label: 'Uncertain',
      count: stats.uncertain,
      color: 'text-gray-400',
      bgColor: 'bg-gray-50',
      borderColor: 'border-gray-200'
    },
    {
      emoji: '👎',
      label: 'Negative',
      count: stats.disagree,
      color: 'text-red-400',
      bgColor: 'bg-red-50',
      borderColor: 'border-red-200'
    }
  ]

  return (
    <Card className='w-full'>
      <div className='flex justify-between items-center gap-4'>
        {statItems.map((item, index) => (
          <div
            key={index}
            className={`flex-1 ${item.bgColor} rounded-lg p-4 border ${item.borderColor} text-center`}
          >
            <div className='flex flex-col items-center'>
              {/* Emoji Circle */}
              <div className={`mb-2 text-2xl ${item.color}`}>
                <span role='img' aria-label={item.label}>{item.emoji}</span>
              </div>

              {/* Circular Progress */}
              <div className='relative'>
                <CircularProgress
                  percentage={total > 0 ? (item.count / total) * 100 : 0}
                  color={item.color}
                />
                <div className='absolute inset-0 flex items-center justify-center'>
                  <div className='text-center'>
                    <div className={`text-xl font-bold ${item.color}`}>
                      {item.count}
                    </div>
                  </div>
                </div>
              </div>

              {/* Label */}
              <div className='mt-2'>
                <h4 className='text-sm font-medium text-gray-700'>
                  {item.label}
                </h4>
                <p className='text-xs text-gray-500'>
                  {total > 0 ? Math.round((item.count / total) * 100) : 0}%
                </p>
              </div>
            </div>
          </div>
        ))}
      </div>

      {/* Total Section */}
      <div className='mt-4 pt-3 border-t text-center'>
        <span className='text-sm text-gray-500'>
          Total Responses: <span className='font-medium'>{total}</span>
        </span>
      </div>
    </Card>
  )
}


export default EmojiStats

================
File: src/components/verification/FeedBackSubmitSection.tsx
================
import React, { memo, useRef, useState } from 'react'
import { Button, Textarea } from 'flowbite-react'
import { ChevronLeft, ChevronRight } from 'lucide-react'
import { FeedbackType } from '../../types'
import { EMOJIS, FEEDBACK_TYPES } from '../../config'

interface EmojiOption {
  key: string;
  value: FeedbackType;
  emoji: string;
  label: string;
}

export const FeedbackSubmitSection = memo(({
                                             selectedEmoji,
                                             setSelectedEmoji,
                                             comment,
                                             setComment,
                                             isPublic,
                                             setIsPublic,
                                             handleSubmit,
                                             isLoading
                                           }: {
  selectedEmoji: FeedbackType | '';
  setSelectedEmoji: (emoji: FeedbackType | '') => void;
  comment: string;
  setComment: (comment: string) => void;
  isPublic: boolean;
  setIsPublic: (isPublic: boolean) => void;
  handleSubmit: () => Promise<void>;
  isLoading: boolean;
}) => {
  const emojiOptions: EmojiOption[] = Object.entries(FEEDBACK_TYPES).map(([key, value]) => ({
    key,
    value,
    emoji: EMOJIS[value],
    label: key
  }))

  const [currentIndex, setCurrentIndex] = useState(1)
  const touchStartX = useRef<number | null>(null)
  const touchEndX = useRef<number | null>(null)
  const minSwipeDistance = 50

  const updateIndex = (direction: 'next' | 'prev') => {
    setCurrentIndex(prev => {
      const newIndex = direction === 'next'
        ? (prev === emojiOptions.length - 1 ? 0 : prev + 1)
        : (prev === 0 ? emojiOptions.length - 1 : prev - 1)
      setSelectedEmoji(emojiOptions[newIndex].value)
      return newIndex
    })
  }

  // Touch event handlers
  const handleTouchStart = (e: React.TouchEvent) => {
    touchStartX.current = e.touches[0].clientX
  }

  const handleTouchMove = (e: React.TouchEvent) => {
    touchEndX.current = e.touches[0].clientX
  }

  const handleTouchEnd = () => {
    if (!touchStartX.current || !touchEndX.current) return

    const distance = touchStartX.current - touchEndX.current
    const isLeftSwipe = distance > minSwipeDistance
    const isRightSwipe = distance < -minSwipeDistance

    if (isLeftSwipe) {
      updateIndex('next')
    } else if (isRightSwipe) {
      updateIndex('prev')
    }

    touchStartX.current = null
    touchEndX.current = null
  }

  // Mouse event handlers
  const handleMouseDown = (e: React.MouseEvent) => {
    touchStartX.current = e.clientX
  }

  const handleMouseMove = (e: React.MouseEvent) => {
    if (touchStartX.current !== null) {
      touchEndX.current = e.clientX
    }
  }

  const handleMouseUp = () => {
    if (touchStartX.current && touchEndX.current) {
      const distance = touchStartX.current - touchEndX.current
      const isLeftSwipe = distance > minSwipeDistance
      const isRightSwipe = distance < -minSwipeDistance

      if (isLeftSwipe) {
        updateIndex('next')
      } else if (isRightSwipe) {
        updateIndex('prev')
      }
    }
    touchStartX.current = null
    touchEndX.current = null
  }

  const handleMouseLeave = () => {
    touchStartX.current = null
    touchEndX.current = null
  }

  return (
    <div className='p-6 space-y-8'>
      {/* Header Section */}
      <div className='text-center space-y-2'>
        <h2 className='text-2xl font-bold text-gray-900'>How are you feeling?</h2>
        <p className='text-gray-600'>
          Your input is valuable in helping us better understand your needs and tailor our service accordingly.
        </p>
      </div>

      {/* Emoji Selector with Navigation Buttons */}
      <div className='flex items-center justify-center'>
        {/* Left Navigation Button */}
        <button
          onClick={() => updateIndex('prev')}
          className='p-2 rounded-full hover:bg-gray-100 transition-colors transform hover:scale-110 focus:outline-none focus:ring-2 focus:ring-gray-200'
          aria-label='Previous emoji'
        >
          <ChevronLeft className='w-6 h-6 text-gray-500' />
        </button>

        {/* Swipeable Emoji Area */}
        <div
          className='flex items-center justify-center space-x-8 mx-4 cursor-grab active:cursor-grabbing'
          onTouchStart={handleTouchStart}
          onTouchMove={handleTouchMove}
          onTouchEnd={handleTouchEnd}
          onMouseDown={handleMouseDown}
          onMouseMove={handleMouseMove}
          onMouseUp={handleMouseUp}
          onMouseLeave={handleMouseLeave}
        >
          {/* Previous Emoji */}
          <div className='opacity-50 transform scale-75 select-none transition-transform duration-200'>
            <span className='text-3xl'>
              {emojiOptions[(currentIndex - 1 + emojiOptions.length) % emojiOptions.length].emoji}
            </span>
          </div>

          {/* Current Emoji */}
          <div className='transform scale-150 select-none transition-transform duration-200 hover:scale-155'>
            <span className='text-4xl'>
              {emojiOptions[currentIndex].emoji}
            </span>
          </div>

          {/* Next Emoji */}
          <div className='opacity-50 transform scale-75 select-none transition-transform duration-200'>
            <span className='text-3xl'>
              {emojiOptions[(currentIndex + 1) % emojiOptions.length].emoji}
            </span>
          </div>
        </div>

        {/* Right Navigation Button */}
        <button
          onClick={() => updateIndex('next')}
          className='p-2 rounded-full hover:bg-gray-100 transition-colors transform hover:scale-110 focus:outline-none focus:ring-2 focus:ring-gray-200'
          aria-label='Next emoji'
        >
          <ChevronRight className='w-6 h-6 text-gray-500' />
        </button>
      </div>

      {/* Selected Emoji Label */}
      <div className='text-center'>
        <span className='px-4 py-1 bg-gray-100 rounded-full text-sm font-medium text-gray-700'>
          {emojiOptions[currentIndex].label}
        </span>
      </div>

      {/* Comment Section */}
      <Textarea
        value={comment}
        onChange={(e) => setComment(e.target.value)}
        placeholder='Add a comment...'
        rows={3}
        className='resize-none focus:border-green-500 focus:ring-green-500'
      />

      {/* Public Toggle */}
      <div className='flex items-center space-x-2'>
        <input
          type='checkbox'
          id='public-toggle'
          checked={isPublic}
          onChange={(e) => setIsPublic(e.target.checked)}
          className='rounded text-green-600 focus:ring-green-500'
        />
        <label htmlFor='public-toggle' className='text-sm text-gray-600'>
          Make feedback public
        </label>
      </div>

      {/* Submit Button */}
      <Button
        color='success'
        className='w-full'
        onClick={handleSubmit}
        disabled={!selectedEmoji || isLoading}
      >
        {isLoading ? (
          <div className='flex items-center justify-center'>
            <div className='loading-spinner mr-2' />
            Submitting...
          </div>
        ) : (
          'Submit Now'
        )}
      </Button>
    </div>
  )
})

================
File: src/components/verification/GooglePageCard.tsx
================
import { GooglePage } from '../../types/verification'
import { HiExternalLink } from 'react-icons/hi'

export const GooglePageCard: React.FC<{
  page: GooglePage;
  index: number;
  onView: () => void;
}> = ({ page, index, onView }) => (
  <div className='bg-white p-4 rounded-lg border border-gray-200 hover:shadow-md transition-shadow flex flex-col'>
    <div className='flex items-start justify-between mb-3'>
      <span className='inline-flex items-center px-2 py-1 text-xs font-medium rounded bg-gray-100 text-gray-800'>
        Source {index + 1}
      </span>
      <a
        href={page.url}
        target='_blank'
        rel='noopener noreferrer'
        className='text-blue-600 hover:text-blue-800'
      >
        <HiExternalLink className='w-4 h-4' />
      </a>
    </div>

    <p className='text-sm text-gray-600 mb-3 line-clamp-2 flex-grow'>
      {new URL(page.url).hostname}
    </p>

    <button
      onClick={onView}
      className='w-full px-3 py-2 text-sm font-medium text-blue-600 bg-blue-50 rounded-lg hover:bg-blue-100 transition-colors'
    >
      View Content
    </button>
  </div>
)

================
File: src/components/verification/GoogleResultsSection.tsx
================
import React from 'react'
import { Card } from 'flowbite-react'
import { HiExternalLink } from 'react-icons/hi'

interface GooglePage {
  url: string;
  html: string;
}

interface GoogleResultsSectionProps {
  pages: GooglePage[];
  selectedPage: GooglePage | null;
  setSelectedPage: (page: GooglePage | null) => void;
}

const GoogleResultsSection: React.FC<GoogleResultsSectionProps> = ({ pages, selectedPage, setSelectedPage }) => {
  return (
    <>
      <Card className='mb-4'>
        <div className='grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4'>
          {pages.slice(0, 4).map((page, idx) => (
            <div
              key={idx}
              className='bg-white p-4 rounded-lg border border-gray-200 hover:shadow-md transition-shadow flex flex-col'
            >
              <div className='flex items-start justify-between mb-3'>
                <span
                  className='inline-flex items-center px-2 py-1 text-xs font-medium rounded bg-gray-100 text-gray-800'>
                  Source {idx + 1}
                </span>
                <a
                  href={page.url}
                  target='_blank'
                  rel='noopener noreferrer'
                  className='text-blue-600 hover:text-blue-800'
                >
                  <HiExternalLink className='w-4 h-4' />
                </a>
              </div>

              <p className='text-sm text-gray-600 mb-3 line-clamp-2 flex-grow'>
                {new URL(page.url).hostname}
              </p>

              <button
                onClick={() => setSelectedPage(page)}
                className='w-full px-3 py-2 text-sm font-medium text-blue-600 bg-blue-50 rounded-lg hover:bg-blue-100 transition-colors'
              >
                View Content
              </button>
            </div>
          ))}
        </div>
      </Card>
    </>
  )
}

export default GoogleResultsSection

================
File: src/components/verification/ModelResponse.tsx
================
import React, { memo, useMemo } from 'react'
import { Alert, Badge } from 'flowbite-react'
import { HiThumbDown, HiThumbUp, HiX } from 'react-icons/hi'

interface ModelResponseProps {
  model: string;
  response: {
    short_ans: number;
    full_ans: string;
  };
}

export const ModelResponseHeader: React.FC<{ stats: any }> = ({ stats }) => (
  <div className='flex justify-between items-center mb-4'>
    <h4 className='text-xl font-bold text-gray-900'>Model Verification Results</h4>
    <Alert color='info' className='p-2'>
      <div className='flex items-center gap-2'>
                <span className='font-medium text-sm'>
                  {stats.verified} Verified, {stats.notVerified} Not Verified
                  {stats.noAnswer > 0 && `, ${stats.noAnswer} No Answer`}
                </span>
      </div>
    </Alert>
  </div>
)

export const ModelResponse = memo<ModelResponseProps>(({ model, response }) => {
  const config = useMemo(() => {
    switch (response.short_ans) {
      case 1:
        return {
          icon: <HiThumbUp className='w-5 h-5 text-green-600' />,
          bgColor: 'bg-green-100',
          badge: { color: 'success', text: 'Verified' }
        }
      case 0:
        return {
          icon: <HiThumbDown className='w-5 h-5 text-red-600' />,
          bgColor: 'bg-red-100',
          badge: { color: 'failure', text: 'Not Verified' }
        }
      default:
        return {
          icon: <HiX className='w-5 h-5 text-gray-600' />,
          bgColor: 'bg-gray-100',
          badge: { color: 'gray', text: 'No Answer' }
        }
    }
  }, [response.short_ans])

  return (
    <div
      className='flex items-center justify-between p-4 bg-white border rounded-lg hover:shadow-md transition-shadow'
      data-testid='model-response'
    >
      <div className='flex items-center space-x-4'>
        <div className={`p-2 rounded-lg ${config.bgColor}`}>{config.icon}</div>
        <div>
          <h5 className='text-lg font-semibold text-gray-900'>{model}</h5>
          <Badge color={config.badge.color as any} className='mt-1'>
            {config.badge.text}
          </Badge>
        </div>
      </div>

      <div className='text-sm max-w-xl'>
        <div className='text-gray-600 mb-1'>Reasoning:</div>
        <div className='text-gray-800'>{response.full_ans}</div>
      </div>
    </div>
  )
})

ModelResponse.displayName = 'ModelResponse'

================
File: src/components/verification/PromptSection.tsx
================
import { VerificationData } from '../../types/verification'
import { useState } from 'react'

export const PromptSection: React.FC<{
  title: string;
  content: string;
  data: VerificationData;
}> = ({ title, content, data }) => {
  const [isVisible, setIsVisible] = useState(false)

  return (
    <div className='mb-6'>
      <div className='flex items-center justify-between mb-2'>
        <h3 className='text-sm font-semibold text-gray-700'>{title}</h3>
        <button
          className='text-sm text-blue-600 hover:text-blue-800'
          onClick={() => setIsVisible(!isVisible)}
        >
          Show/Hide Details
        </button>
      </div>

      <div className={!isVisible ? 'hidden' : ''}>
        <div className='bg-gray-50 p-4 rounded-lg border border-gray-200 overflow-x-auto'>
          <pre className='text-xs text-gray-600 whitespace-pre-wrap'>{content}</pre>
        </div>
        {title.includes('Question') && (
          <div className='mt-4 p-3 bg-yellow-50 border border-yellow-200 rounded-lg'>
            <p className='text-sm text-yellow-800'>
              <strong>Current Input:</strong> {data.human_readable}
            </p>
          </div>
        )}
      </div>
    </div>
  )
}

================
File: src/components/verification/QuestionTable.tsx
================
// components/verification/QuestionTable.tsx
import React, { useMemo } from 'react'
import type { Question } from '../../types/verification'

interface QuestionTableProps {
  questions: Question[];
}

export const QuestionTable: React.FC<QuestionTableProps> = ({ questions }) => {
  const sortedQuestions = useMemo(() =>
      [...questions].sort((a, b) => Number(b.score) - Number(a.score)),
    [questions]
  )

  const getScoreColor = (score: number) => {
    if (Number(score) >= 0.8) {
      return 'text-green-600'
    }
    if (Number(score) >= 0.6) {
      return 'text-blue-600'
    }
    if (Number(score) >= 0.4) {
      return 'text-yellow-600'
    }
    return 'text-red-600'
  }

  const getRankBadge = (idx: number) => {
    if (idx >= 3) {
      return null
    }

    const badges = [
      { bg: 'bg-yellow-100', text: 'text-yellow-800', label: 'Best Match' },
      { bg: 'bg-gray-100', text: 'text-gray-800', label: 'Second Best' },
      { bg: 'bg-amber-100', text: 'text-amber-800', label: 'Third Best' }
    ]

    const badge = badges[idx]
    return (
      <span
        className={`ml-2 inline-flex items-center px-2 py-0.5 rounded text-xs font-medium ${badge.bg} ${badge.text}`}>
        {badge.label}
      </span>
    )
  }

  return (
    <div className='overflow-x-auto'>
      <table className='w-full text-sm text-left'>
        <thead className='text-xs bg-gray-50'>
        <tr>
          <th scope='col' className='px-4 py-3'>Rank</th>
          <th scope='col' className='px-4 py-3'>Question</th>
          <th scope='col' className='px-4 py-3 text-right'>Score</th>
        </tr>
        </thead>
        <tbody className='divide-y'>
        {sortedQuestions.map((q, idx) => (
          <tr key={idx} className='hover:bg-gray-50'>
            <td className='px-4 py-3 w-16'>
              {idx < 3 ? (
                <span className={`inline-flex items-center justify-center w-6 h-6 rounded-full 
                    ${idx === 0 ? 'bg-yellow-100 text-yellow-800' :
                  idx === 1 ? 'bg-gray-100 text-gray-800' :
                    'bg-amber-100 text-amber-800'}`}>
                    {idx + 1}
                  </span>
              ) : (
                <span className='text-gray-500'>{idx + 1}</span>
              )}
            </td>
            <td className='px-4 py-3'>
              <div className='flex items-center'>
                <span className='font-medium text-gray-900'>{q.question}</span>
                {getRankBadge(idx)}
              </div>
            </td>
            <td className='px-4 py-3 text-right font-mono'>
                <span className={`${idx < 3 ? 'font-bold' : ''} ${getScoreColor(q.score)}`}>
                  {Number(q.score).toFixed(4)}
                </span>
            </td>
          </tr>
        ))}
        </tbody>
      </table>
    </div>
  )
}

================
File: src/components/verification/ResponseDistribution.tsx
================
import React from 'react'

export const ResponseDistribution: React.FC<{ stats: any }> = ({ stats }) => (
  <div className='mt-4 p-3 bg-gray-50 rounded-lg'>
    <div className='text-sm text-gray-600'>
      <span className='font-semibold'>Response Distribution:</span>
      <div className='w-full h-2.5 mt-2 rounded-full overflow-hidden bg-gray-200 flex'>
        <div
          className='h-full bg-green-600 transition-all duration-300'
          style={{ width: `${stats.verifiedRate}%` }}
        />
        <div
          className='h-full bg-red-600 transition-all duration-300'
          style={{ width: `${stats.notVerifiedRate}%` }}
        />
      </div>
      <div className='flex justify-between mt-2'>
        <span>Verified: {stats.verifiedRate.toFixed(1)}%</span>
        <span>Not Verified: {stats.notVerifiedRate.toFixed(1)}%</span>
      </div>
      {stats.noAnswer > 0 && (
        <div className='mt-2 text-gray-500 text-xs'>
          * {stats.noAnswer} model{stats.noAnswer > 1 ? 's' : ''} provided no answer
        </div>
      )}
    </div>
  </div>
)

================
File: src/components/verification/ScoreLegend.tsx
================
// components/verification/ScoreLegend.tsx
import React from 'react'

export const ScoreLegend: React.FC = () => (
  <div className='mt-4 px-4 py-3 bg-gray-50 rounded-lg'>
    <p className='text-xs text-gray-600 font-medium mb-2'>Score Range Legend:</p>
    <div className='grid grid-cols-2 md:grid-cols-4 gap-2 text-xs'>
      <ScoreLegendItem color='bg-green-600' range='0.8-1.0' label='High Relevance' />
      <ScoreLegendItem color='bg-blue-600' range='0.6-0.8' label='Good Match' />
      <ScoreLegendItem color='bg-yellow-600' range='0.4-0.6' label='Moderate' />
      <ScoreLegendItem color='bg-red-600' range='<0.4' label='Low Relevance' />
    </div>
  </div>
)

const ScoreLegendItem: React.FC<{
  color: string;
  range: string;
  label: string;
}> = ({ color, range, label }) => (
  <span className='flex items-center'>
    <span className={`w-3 h-3 rounded-full ${color} mr-2`}></span>
    <span>{range}: {label}</span>
  </span>
)

================
File: src/components/verification/TripleDisplay.tsx
================
// components/verification/TripleDisplay.tsx
import React from 'react'
import { Badge, Card } from 'flowbite-react'
import { HiCube, HiLink } from 'react-icons/hi'

interface TripleDisplayProps {
  subject: string;
  predicate: string;
  object: string;
}

export const TripleDisplay: React.FC<TripleDisplayProps> = (
  {
    subject,
    predicate,
    object
  }
) => {
  const EntityBox: React.FC<{
    type: 'subject' | 'predicate' | 'object';
    value: string;
  }> = ({ type, value }) => {
    const isPredicateBox = type === 'predicate'
    return (
      <div className={`${isPredicateBox ? 'bg-blue-50' : 'bg-gray-50'} rounded-lg p-4`}>
        <div className='flex items-center justify-between mb-2'>
          <Badge
            color={isPredicateBox ? 'blue' : 'gray'}
            className='px-3 py-1'
          >
            <div className='flex items-center gap-1'>
              {isPredicateBox ? (
                <HiLink className='w-4 h-4' />
              ) : (
                <HiCube className='w-4 h-4' />
              )}
              <span>{type.charAt(0).toUpperCase() + type.slice(1)}</span>
            </div>
          </Badge>
          <HiLink className='w-4 h-4 text-gray-400' />
        </div>
        <p className={`${isPredicateBox ? 'text-blue-900' : 'text-gray-900'} font-medium break-words`}>
          {value}
        </p>
      </div>
    )
  }

  return (
    <Card className='mb-4 bg-white'>
      <div className='grid grid-cols-1 md:grid-cols-3 gap-4'>
        <EntityBox type='subject' value={subject} />
        <EntityBox type='predicate' value={predicate} />
        <EntityBox type='object' value={object} />
      </div>
    </Card>
  )
}

================
File: src/components/verification/VerificationProcess.tsx
================
import React, { useState } from 'react'
import { Alert, Badge, Card, Modal, Timeline } from 'flowbite-react'
import { HiInformationCircle, HiOutlineExternalLink } from 'react-icons/hi'
import { ModelResponse, ModelResponseHeader } from './ModelResponse'
import type { ProcessStep, VerificationData } from '../../types/verification'
import { useDocumentContent } from '../../hooks/useDocumentContent'
import { DocumentModal } from './modals/DocumentModal'
import { TripleDisplay } from './TripleDisplay'
import { DocumentCard } from './modals/DocumentCard'
import { GooglePageCard } from './GooglePageCard'
import { PromptSection } from './PromptSection'
import { QuestionTable } from './QuestionTable'
import { generateHumanReadablePrompt, generateQuestionPromptContent } from '../../utils/promptGenerators'
import { ScoreLegend } from './ScoreLegend'
import { ResponseDistribution } from './ResponseDistribution'
import { calculateModelStats } from '../../utils/calculateModelStats'
import { AnalysisCard } from './AnalysisCard.'

interface VerificationProcessProps {
  data: VerificationData;
  currentStep: number;
}

const VERIFICATION_STEPS: ProcessStep[] = [
  {
    id: 'tripleProcessing',
    title: 'Original Triple',
    description: 'Processing and analyzing the knowledge graph triple'
  },
  {
    id: 'humanReadable',
    title: 'Human Readable Format',
    prompt: 'Convert a knowledge graph triple into a meaningful human-readable sentence.',
    examples: [
      {
        input: `Subject: Alexander_III_of_Russia
Predicate: isMarriedTo
Object: Maria_Feodorovna__Dagmar_of_Denmark_`,
        output: 'Alexander III of Russia is married to Maria Feodorovna, also known as Dagmar of Denmark.'
      }
    ]
  },
  {
    id: 'questions',
    title: 'Generated Questions',
    description: 'Generating verification questions based on the triple',
    prompt: 'Generate insightful questions to verify the accuracy of the knowledge graph triple.'
  },
  {
    id: 'googlePages',
    title: 'Evidence Search',
    description: 'Searching and analyzing web evidence'
  },
  {
    id: 'selectedDocs',
    title: 'Document Analysis',
    description: 'Analyzing selected documents for verification'
  },
  {
    id: 'llmSubmission',
    title: 'Model Verification',
    description: 'Large Language Models analyzing evidence'
  },
  {
    id: 'tieBreaker',
    title: 'Consensus Check',
    description: 'Checking for consensus among model responses'
  },
  {
    id: 'finalDecision',
    title: 'Final Verification',
    description: 'Synthesizing final verification decision'
  }
]


export const VerificationProcess: React.FC<VerificationProcessProps> = ({ data, currentStep }) => {
  const [pageModal, setPageModal] = useState<{ isOpen: boolean; url: string; html: string }>({
    isOpen: false,
    url: '',
    html: ''
  })
  const { docModal, openDocument, closeDocument } = useDocumentContent()

  const renderFinalAnalysis = () => (
    <div className='grid grid-cols-1 md:grid-cols-2 gap-4 mb-4'>
      <Card>
        <h5 className='text-lg font-bold mb-4'>Error Analysis</h5>
        <div className='space-y-2'>
          <p><span className='font-semibold'>Category:</span> {data.analysis.error_category}</p>
          <p><span className='font-semibold'>Detail:</span> {data.analysis.error_detail}</p>
        </div>
      </Card>
      <Card>
        <h5 className='text-lg font-bold mb-4'>Classification</h5>
        <div className='space-y-2'>
          <p><span className='font-semibold'>Category:</span> {data.analysis.category}</p>
          <p><span className='font-semibold'>Stratum:</span> {data.analysis.stratum}</p>
          <p><span className='font-semibold'>Topic:</span> {data.analysis.topic}</p>
        </div>
      </Card>
    </div>
  )

  const renderStepContent = (stepIndex: number) => {
    switch (stepIndex) {
      case 0:
        return (
          <TripleDisplay
            subject={data.subject}
            predicate={data.predicate}
            object={data.object}
          />
        )
      case 1:
        return (
          <Card className='mb-4'>
            <PromptSection
              title='Sentence Generation Prompt'
              content={generateHumanReadablePrompt(data)}
              data={data}
            />

            {/* Output Display */}
            <div className='overflow-x-auto'>
              <table className='w-full text-sm text-left'>
                <thead className='text-xs bg-gray-50'>
                <tr>
                  <th scope='col' className='px-4 py-3'>Input Triple</th>
                  <th scope='col' className='px-4 py-3'>Human Readable Output</th>
                </tr>
                </thead>
                <tbody>
                <tr className='border-b'>
                  <td className='px-4 py-3'>
                    <div className='space-y-1'>
                      <div className='text-xs text-gray-500'>Subject</div>
                      <div className='font-medium text-gray-900'>{data.subject}</div>
                      <div className='text-xs text-gray-500 mt-2'>Predicate</div>
                      <div className='font-medium text-gray-900'>{data.predicate}</div>
                      <div className='text-xs text-gray-500 mt-2'>Object</div>
                      <div className='font-medium text-gray-900'>{data.object}</div>
                    </div>
                  </td>
                  <td className='px-4 py-3'>
                    <div className='bg-blue-50 p-3 rounded-lg border border-blue-100'>
                      <div className='text-xs text-blue-600 mb-1'>Generated Sentence</div>
                      <div className='font-medium text-blue-900'>{data.human_readable}</div>
                    </div>
                    <div className='mt-2 text-xs text-gray-500'>
                      Format: <code
                      className='bg-gray-100 px-1 py-0.5 rounded'>{'{\'output\': \'...\'}'}</code>
                    </div>
                  </td>
                </tr>
                </tbody>
              </table>
            </div>

            {/* Legend */}
            <div className='mt-4 px-4 py-3 bg-gray-50 rounded-lg'>
              <p className='text-xs text-gray-600 font-medium mb-2'>Process Overview:</p>
              <div className='grid grid-cols-1 md:grid-cols-3 gap-2 text-xs'>
                        <span className='flex items-center'>
                          <span className='w-3 h-3 rounded-full bg-gray-400 mr-2'></span>
                          <span>1. Parse Input Triple</span>
                        </span>
                <span className='flex items-center'>
                          <span className='w-3 h-3 rounded-full bg-blue-400 mr-2'></span>
                          <span>2. Generate Natural Language</span>
                        </span>
                <span className='flex items-center'>
                          <span className='w-3 h-3 rounded-full bg-green-400 mr-2'></span>
                          <span>3. Format JSON Response</span>
                        </span>
              </div>
            </div>
          </Card>
        )
      case 2:
        return (
          <Card className='mb-4'>
            <PromptSection
              title='Question Generation Prompt'
              content={generateQuestionPromptContent(data)}
              data={data}
            />
            <QuestionTable questions={data.questions} />
            <ScoreLegend />
          </Card>
        )
      case 3:
        return (
          <Card className='mb-4'>
            <div className='grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4'>
              {data.google_pages.map((page, idx) => (
                <GooglePageCard
                  key={idx}
                  page={page}
                  index={idx}
                  onView={() => setPageModal({
                    isOpen: true,
                    url: page.url,
                    html: page.html
                  })}
                />
              ))}
            </div>
          </Card>
        )
      case 4:
        return (
          <Card className='mb-4'>
            <div className='flex items-center justify-between mb-4'>
              <h3 className='text-lg font-bold text-gray-900'>Selected Documents</h3>
              <span className='text-sm text-gray-500'>
                              {data.selected_docs.length} document{data.selected_docs.length !== 1 ? 's' : ''}
                            </span>
            </div>

            <div className='grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-5 gap-4'>
              {data.selected_docs.map((doc, idx) => (
                <DocumentCard
                  key={idx}
                  doc={doc}
                  index={idx}
                  onView={() => openDocument(doc.file_id)}
                />
              ))}
            </div>
          </Card>
        )
      case 5: {
        const modelStats = calculateModelStats(data.responses)

        return (
          <Card className='mb-4'>
            <div className='space-y-4'>
              <ModelResponseHeader stats={modelStats} />

              <div className='space-y-3'>
                {Object.entries(data.responses).map(([model, response], idx) => (
                  <ModelResponse
                    key={`${model}-${idx}`}
                    model={model}
                    response={response}
                  />
                ))}
              </div>

              <ResponseDistribution stats={modelStats} />
            </div>
          </Card>
        )
      }
      case 6:
        if (data.need_tiebreaker) {
          return (
            <Card className='mb-4'>
              <div className='space-y-4'>
                <div className='flex justify-between items-center mb-4'>
                  <h4 className='text-xl font-bold text-gray-900'>Tiebreaker Verification</h4>
                  <Badge color='purple'>Consensus Check</Badge>
                </div>

                <div className='space-y-3'>
                  {Object.entries(data.tiebreakers_responses).map(([model, response], idx) => (
                    <ModelResponse
                      key={`tiebreaker-${model}-${idx}`}
                      model={model}
                      response={response}
                    />
                  ))}
                </div>

                {/*<ResponseDistribution stats={tieStats} />*/}
              </div>
            </Card>
          )
        }
        return
      case 7:
        return <AnalysisCard analysis={data.analysis}/>
      default:
        return null
    }
  }

  const final_decision_color = data.need_tiebreaker ? 'indigo' : data.final_decision === 'true' ? 'success' : 'failure'
  const final_decision_text = data.need_tiebreaker ? 'Tiebreaker Required' : data.final_decision === 'true' ? 'Verified' : 'Not Verified'
  return (
    <div className='max-w-4xl mx-auto'>
      <Alert
        color={final_decision_color}
        icon={HiInformationCircle}
        className='mb-4'
      >
        <span className='font-medium'>
          {final_decision_text}
        </span>
      </Alert>

      <Timeline>
        {VERIFICATION_STEPS.map((step, index) => (
          <Timeline.Item key={step.id}>
            <Timeline.Point />
            <Timeline.Content>
              <Timeline.Time>
                {step.description && (
                  <span className='text-sm text-gray-500'>{step.description}</span>
                )}
              </Timeline.Time>
              <Timeline.Title>{step.title}</Timeline.Title>
              <Timeline.Body>
                <div
                  className={`transition-opacity duration-300 ${
                    index <= currentStep ? 'opacity-100' : 'opacity-0'
                  }`}
                >
                  {renderStepContent(index)}
                </div>
              </Timeline.Body>
            </Timeline.Content>
          </Timeline.Item>
        ))}
      </Timeline>

      <Modal
        show={pageModal.isOpen}
        onClose={() => setPageModal({ isOpen: false, url: '', html: '' })}
        size='5xl'
      >
        <Modal.Header>Search Result Content</Modal.Header>
        <Modal.Body>
          <div className='mb-4'>
            <a
              href={pageModal.url}
              target='_blank'
              rel='noopener noreferrer'
              className='text-blue-600 hover:underline flex items-center'
            >
              View original page
              <HiOutlineExternalLink className='ml-2' />
            </a>
          </div>
          <div className='w-full h-[70vh] overflow-hidden'>
            <div className='relative w-full h-full'>
              <iframe
                src={`./data/html/${pageModal.html}`}
                className='w-full h-full border rounded-lg'
                style={{
                  overflow: 'auto',
                  overflowX: 'hidden'
                }}
                title='Page Content'
              />
            </div>
          </div>
        </Modal.Body>
      </Modal>

      <DocumentModal
        isOpen={docModal.isOpen}
        onClose={closeDocument}
        fileId={docModal.fileId}
        content={docModal.content}
        isLoading={docModal.isLoading}
      />
    </div>
  )
}

export default VerificationProcess

================
File: src/components/AuthCallback.tsx
================
// src/components/AuthCallback.tsx
import { useEffect } from 'react'
import { useLocation, useNavigate } from 'react-router-dom'
import { socialAuth } from '../services/auth'

export const AuthCallback = () => {
  const navigate = useNavigate()
  const location = useLocation()

  useEffect(() => {
    const tokens = new URLSearchParams(location.search).get('tokens')
    if (tokens) {
      socialAuth
        .handleCallback(tokens)
        .then(success => {
          if (success) {
            navigate('/')
          } else {
            navigate('/login?error=auth_failed')
          }
        })
        .catch(() => navigate('/login?error=auth_failed'))
    }
  }, [location, navigate])

  return (
    <div className="flex items-center justify-center min-h-screen">
      <div className="text-center">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-gray-900"></div>
        <p className="mt-4 text-gray-600">Processing authentication...</p>
      </div>
    </div>
  )
}

================
File: src/contexts/AuthContext.tsx
================
// src/contexts/AuthContext.tsx
import React, { createContext, useContext, useEffect, useState } from 'react'

const API_BASE_URL = 'http://localhost:8000/api'
export interface User {
  id: number;
  email: string;
  username: string;
  avatar: string;
}

interface AuthContextType {
  isAuthenticated: boolean;
  user: User | null;
  isLoading: boolean;
  error: string | null;
  registerWithEmail: (credentials: RegisterCredentials) => Promise<void>;
  loginWithEmail: (credentials: LoginCredentials) => Promise<void>;
  socialLogin: (provider: 'google' | 'orcid') => Promise<void>;
  logout: () => Promise<void>;
  checkAuth: () => Promise<void>;
}

interface AuthResponse {
  user: User;
  tokens: {
    access: string;
    refresh: string;
  };
}

interface LoginCredentials {
  email: string;
  password: string;
}

interface RegisterCredentials extends LoginCredentials {
  username: string;
  password2: string;
}

const AuthContext = createContext<AuthContextType>({} as AuthContextType)

export const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [user, setUser] = useState<User | null>(null)
  const [isAuthenticated, setIsAuthenticated] = useState(false)
  const [isLoading, setIsLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)

  const clearTokens = () => {
    localStorage.removeItem('access_token')
    localStorage.removeItem('refresh_token')
  }

  const handleAuthSuccess = (data: AuthResponse) => {
    localStorage.setItem('access_token', data.tokens.access)
    localStorage.setItem('refresh_token', data.tokens.refresh)
    setUser(data.user)
    setIsAuthenticated(true)
    setIsLoading(false)
    setError(null)
  }

  const handleAuthError = (error: any) => {
    setIsAuthenticated(false)
    setUser(null)
    setIsLoading(false)
    setError(error.message || 'Authentication failed')
    clearTokens()
  }

  const checkAuth = async () => {
    try {
      setIsLoading(true)
      const token = localStorage.getItem('access_token')
      if (!token) {
        throw new Error('No token found')
      }

      const response = await fetch(`${API_BASE_URL}/auth/profile/`, {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      })

      if (response.ok) {
        const userData = await response.json()
        setUser(userData)
        setIsAuthenticated(true)
      } else {
        await refreshToken()
      }
    } catch (error) {
      handleAuthError(error)
    } finally {
      setIsLoading(false)
    }
  }

  const refreshToken = async () => {
    try {
      const refresh = localStorage.getItem('refresh_token')
      if (!refresh) throw new Error('No refresh token')

      const response = await fetch(`${API_BASE_URL}/auth/token/refresh/`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ refresh })
      })

      if (response.ok) {
        const data = await response.json()
        localStorage.setItem('access_token', data.access)
        await checkAuth()
      } else {
        throw new Error('Token refresh failed')
      }
    } catch (error) {
      handleAuthError(error)
    }
  }

  const loginWithEmail = async (credentials: LoginCredentials) => {
    try {
      setIsLoading(true)
      setError(null)

      const response = await fetch(`${API_BASE_URL}/auth/login/`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(credentials)
      })

      if (response.ok) {
        const data: AuthResponse = await response.json()
        handleAuthSuccess(data)
      } else {
        throw new Error('Login failed')
      }
    } catch (error) {
      handleAuthError(error)
    }
  }

  const registerWithEmail = async (credentials: RegisterCredentials) => {
    try {
      setIsLoading(true)
      setError(null)

      const response = await fetch(`${API_BASE_URL}/auth/register/`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(credentials)
      })

      if (response.ok) {
        const data: AuthResponse = await response.json()
        handleAuthSuccess(data)
      } else {
        throw new Error('Registration failed')
      }
    } catch (error) {
      handleAuthError(error)
    }
  }

  const socialLogin = async (provider: 'google' | 'orcid') => {
    try {
      const response = await fetch(`${API_BASE_URL}/auth/${provider}/login/`)
      const data = await response.json()
      window.location.href = data.auth_url
    } catch (error) {
      handleAuthError(error)
    }
  }

  const logout = async () => {
    try {
      setIsLoading(true)
      const response = await fetch(`${API_BASE_URL}/auth/logout/`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('access_token')}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ refresh: localStorage.getItem('refresh_token') })
      })

      if (response.ok) {
        clearTokens()
        setUser(null)
        setIsAuthenticated(false)
      } else {
        throw new Error('Logout failed')
      }
    } catch (error) {
      handleAuthError(error)
    } finally {
      setIsLoading(false)
    }
  }

  useEffect(() => {
    const token = localStorage.getItem('access_token')
    if (token) {
      checkAuth().then(r => r)
    } else {
      setIsLoading(false)
    }
  }, [])

  const value = {
    isAuthenticated,
    user,
    isLoading,
    error,
    registerWithEmail,
    loginWithEmail,
    socialLogin,
    logout,
    checkAuth
  }

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  )
}

export const useAuth = () => {
  const context = useContext(AuthContext)
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider')
  }
  return context
}

================
File: src/hooks/useDocumentContent.ts
================
import { useCallback, useEffect, useState } from 'react'

export const useDocumentContent = () => {
  const [docModal, setDocModal] = useState({
    isOpen: false,
    fileId: '',
    content: '',
    isLoading: false
  })

  const loadContent = useCallback(async (fileId: string) => {
    setDocModal(prev => ({ ...prev, isLoading: true }))
    try {
      const response = await fetch(`/data/txt/${fileId}`)
      if (!response.ok) throw new Error('Failed to load document')
      const content = await response.text()
      setDocModal(prev => ({
        ...prev,
        content,
        isLoading: false
      }))
    } catch (error) {
      console.error('Error loading document:', error)
      setDocModal(prev => ({
        ...prev,
        content: '',
        isLoading: false,
        isOpen: false,
        fileId: ''
      }))
    }
  }, [])

  useEffect(() => {
    if (docModal.fileId) {
      loadContent(docModal.fileId)
    }
  }, [docModal.fileId, loadContent])

  const openDocument = useCallback((fileId: string) => {
    setDocModal({
      isOpen: true,
      fileId,
      content: '',
      isLoading: true
    })
  }, [])

  const closeDocument = useCallback(() => {
    setDocModal({
      isOpen: false,
      fileId: '',
      content: '',
      isLoading: false
    })
  }, [])

  return {
    docModal,
    openDocument,
    closeDocument
  }
}

================
File: src/hooks/useOnClickOutside.ts
================
import { useEffect } from 'react'

export const useOnClickOutside = (
  ref: React.RefObject<HTMLElement>,
  handler: (event: MouseEvent | TouchEvent) => void
) => {
  useEffect(() => {
    const listener = (event: MouseEvent | TouchEvent) => {
      if (!ref.current || ref.current.contains(event.target as Node)) {
        return
      }
      handler(event)
    }

    document.addEventListener('mousedown', listener)
    document.addEventListener('touchstart', listener)

    return () => {
      document.removeEventListener('mousedown', listener)
      document.removeEventListener('touchstart', listener)
    }
  }, [ref, handler])
}

================
File: src/hooks/useResponsive.ts
================
import { useEffect, useState } from 'react'

export const useResponsive = (breakpoint: number) => {
  const [isMobile, setIsMobile] = useState(window.innerWidth < breakpoint)

  useEffect(() => {
    const handleResize = () => {
      setIsMobile(window.innerWidth < breakpoint)
    }

    window.addEventListener('resize', handleResize)
    return () => window.removeEventListener('resize', handleResize)
  }, [breakpoint])

  return isMobile
}

================
File: src/hooks/useSearchData.ts
================
import { useMemo } from 'react'
import type { SearchMatch, Triple } from '../types/search'
import { yagoData } from '../data/yago'

const realData: Record<string, Record<string, Triple>> = {
  'yago': yagoData
}

export const useSearchData = (searchTerm: string) => {
  return useMemo(() => {
    const results: SearchMatch[] = []
    const normalizedSearchTerm = searchTerm.toLowerCase().trim()

    if (!normalizedSearchTerm) return results

    Object.entries(realData).forEach(([dataset, identifiers]) => {
      Object.entries(identifiers).forEach(([identifier, triple]) => {
        const tripleString = `${triple.subject} ${triple.predicate} ${triple.object}`.toLowerCase()
        if (tripleString.includes(normalizedSearchTerm)) {
          results.push({
            text: `${triple.subject} ${triple.predicate} ${triple.object}`,
            dataset,
            identifier,
            triple
          })
        }
      })
    })

    return results
  }, [searchTerm])
}

================
File: src/pages/HomePage.tsx
================
// src/pages/HomePage.tsx
import React from 'react'
import { SearchBar } from '../components/search/SearchBar'
import { Header } from '../components/layout/Header'
import { Footer } from '../components/layout/Footer'
import { Badge } from 'flowbite-react'

const modelBadges = [
  { name: 'Gemma2', color: 'yellow' },
  { name: 'Llama3.1', color: 'indigo' },
  { name: 'Mistral', color: 'purple' },
  { name: 'Qwen2.5', color: 'pink' }
]

const techBadges = [
  { name: 'Knowledge Graph', color: 'blue' },
  { name: 'Fact Verification', color: 'gray' },
  { name: 'Retrieval-Augmented Generation', color: 'red' },
  { name: 'Large Language Models', color: 'green' }
]

export const HomePage = () => {
  return (
    <div className="min-h-screen flex flex-col">
      <Header />

      <main className="flex-1 container mx-auto px-4 py-8">
        <div className="max-w-4xl mx-auto mb-8">
          <img
            src="/images/comics.png"
            alt="Knowledge Graph Verification"
            className="w-full h-auto rounded-lg shadow-lg"
          />
        </div>

        <div className="max-w-4xl mx-auto mb-8">
          <div className="flex flex-wrap gap-2 justify-center">
            {[...techBadges, ...modelBadges].map(badge => (
              <Badge
                key={badge.name}
                color={badge.color}
                className={`border border-${badge.color}-400`}
              >
                {' '}
                {badge.name}
              </Badge>
            ))}
          </div>
        </div>

        <div className="max-w-4xl mx-auto mb-8">
          <p className="text-gray-700 text-center text-sm md:text-base leading-relaxed">
            A novel approach to{' '}
            <span className="font-semibold text-gray-900 underline decoration-blue-500 decoration-double">
              knowledge graph fact verification
            </span>{' '}
            using
            <span className="font-semibold text-gray-900 underline decoration-green-500 decoration-dotted">
              Retrieval-Augmented Generation (RAG)
            </span>
            , and multiple
            <span className="font-semibold text-gray-900 underline decoration-green-500 decoration-dotted">
              Large Language Models (LLMs)
            </span>
            . The system verifies the truthfulness of facts within knowledge
            graphs by combining advanced information retrieval techniques with
            an ensemble of language models.
          </p>
          <p className="text-gray-700 text-center text-sm md:text-base leading-relaxed">
            Enter a fact in the search bar below to verify its truthfulness.
          </p>
        </div>

        <div className="max-w-2xl mx-auto relative">
          <SearchBar />
        </div>
      </main>

      <Footer />
    </div>
  )
}

================
File: src/pages/ResultsPage.tsx
================
import React, { useEffect, useState } from 'react'
import { useSearchParams } from 'react-router-dom'
import { HistorySidebar } from '../components/history/HistorySidebar'
import VerificationProcess from '../components/verification/VerificationProcess'
import FeedbackSection from '../components/feedback/FeedbackSection'
import { VerificationData } from '../types/verification'
import { HistoryService } from '../services/HistoryService'
import { SearchHistoryItem } from '../types/history'


export const ResultsPage = () => {
  const [searchParams] = useSearchParams()
  const [loading, setLoading] = useState(true)
  const [data, setData] = useState<VerificationData | null>(null)
  const [error, setError] = useState<string | null>(null)
  const [currentStep, setCurrentStep] = useState(0)
  const [history, setHistory] = useState<SearchHistoryItem[]>([])


  const STEP_DELAY = 100
  const steps = [
    'tripleProcessing',
    'humanReadable',
    'questions',
    'googlePages',
    'selectedDocs',
    'llmSubmission',
    'tieBreaker',
    'finalDecision'
  ]

  useEffect(() => {
    const loadData = async () => {
      try {
        const searchTerm = searchParams.get('search')
        const dataset = searchParams.get('dataset')

        if (!searchTerm || !dataset) {
          throw new Error('Missing search parameters')
        }

        const response = await fetch(`/data/${dataset}/${searchTerm}.json`)
        if (!response.ok) throw new Error('Failed to fetch data')

        const verificationData = await response.json()
        setData(verificationData)

        // Simulate step-by-step loading
        for (let i = 0; i < steps.length; i++) {
          await new Promise(resolve => setTimeout(resolve, STEP_DELAY))
          setCurrentStep(i + 1)
        }
      } catch (err) {
        setError(err instanceof Error ? err.message : 'An error occurred')
      } finally {
        setLoading(false)
      }
    }

    loadData().then(r => r)
  }, [searchParams])

  useEffect(() => {
    if (data) {
      const searchTerm = searchParams.get('search')
      const dataset = searchParams.get('dataset')

      if (searchTerm && dataset) {
        HistoryService.addToHistory(searchTerm, dataset, data.human_readable)
        setHistory(HistoryService.getHistory())
      }
    }
  }, [data, searchParams])

  return (
    <div className='min-h-screen bg-gray-50 flex'>
      <HistorySidebar history={history} setHistory={setHistory} />
      <main className='flex-1 container mx-auto px-4 py-8'>
        <div className='max-w-4xl mx-auto'>
          {data && (
            <>
              <VerificationProcess
                data={data}
                currentStep={currentStep}
              />
            </>
          )}
        </div>
        <FeedbackSection
          searchTerm={searchParams.get('search')!}
          dataset={searchParams.get('dataset')!}
        />
      </main>
    </div>
  )
}

================
File: src/services/auth.ts
================
// src/services/auth.ts

export const socialAuth = {
  async googleLogin() {
    const response = await fetch('/api/auth/google/login/')
    const data = await response.json()
    window.location.href = data.auth_url
  },

  async orcidLogin() {
    const response = await fetch('/api/auth/orcid/login/')
    const data = await response.json()
    window.location.href = data.auth_url
  },

  async handleCallback(tokens: string) {
    try {
      const decodedTokens = JSON.parse(atob(tokens))
      localStorage.setItem('access_token', decodedTokens.access)
      localStorage.setItem('refresh_token', decodedTokens.refresh)
      return true
    } catch (error) {
      console.error('Failed to handle auth callback:', error)
      return false
    }
  }
}

================
File: src/services/feedbackService.ts
================
// src/services/feedbackService.ts
import { API_BASE_URL } from '../config'
import { Feedback as FeedbackResponse } from '../types'

export interface FeedbackStats {
  love: number;
  like: number;
  neutral: number;
  dislike: number;
  total: number;
}

export interface FeedbackSubmission {
  searchTerm: string;
  dataset: string;
  feedback: string;
  comment: string;
  isPublic: boolean;
}

class FeedbackService {
  private baseUrl: string

  constructor() {
    this.baseUrl = API_BASE_URL
  }

  async getStats(searchTerm: string, dataset: string): Promise<FeedbackStats> {
    return this.fetch<FeedbackStats>(
      `api/feedback/stats?search=${encodeURIComponent(searchTerm)}&dataset=${encodeURIComponent(dataset)}`
    )
  }

  async getFeedbacks(searchTerm: string, dataset: string): Promise<FeedbackResponse[]> {
    return this.fetch<FeedbackResponse[]>(
      `api/feedback/list?search=${encodeURIComponent(searchTerm)}&dataset=${encodeURIComponent(dataset)}`
    )
  }

  async submitFeedback(data: FeedbackSubmission): Promise<FeedbackResponse> {
    return this.fetch<FeedbackResponse>('api/feedback/submit', {
      method: 'POST',
      body: JSON.stringify(data)
    })
  }

  async voteFeedback(feedbackId: number, isUpvote: boolean): Promise<void> {
    return this.fetch('api/feedback/vote', {
      method: 'POST',
      body: JSON.stringify({
        feedbackId,
        isUpvote
      })
    })
  }

  private async fetch<T>(
    endpoint: string,
    options: RequestInit = {}
  ): Promise<T> {
    const response = await fetch(`${this.baseUrl}${endpoint}`, {
      ...options,
      credentials: 'include',
      headers: {
        'Content-Type': 'application/json',
        ...(options.headers || {})
      }
    })

    if (!response.ok) {
      const error = await response.text()
      throw new Error(error || 'Request failed')
    }

    return response.json()
  }
}

export const feedbackService = new FeedbackService()

================
File: src/services/HistoryService.ts
================
import { SearchHistoryItem } from '../types/history'
import { LocalStorage } from '../utils/storage'

export class HistoryService {
  private static readonly STORAGE_KEY = 'search_history'
  private static readonly MAX_HISTORY_ITEMS = 50

  static getHistory(): SearchHistoryItem[] {
    return LocalStorage.get<SearchHistoryItem[]>(this.STORAGE_KEY, [])
  }

  static addToHistory(
    searchTerm: string,
    dataset: string,
    humanReadable?: string
  ): void {
    const history = this.getHistory()

    const existingIndex = history.findIndex(
      item => item.searchTerm === searchTerm && item.dataset === dataset
    )

    if (existingIndex !== -1) {
      history.splice(existingIndex, 1)
    }

    const newItem: SearchHistoryItem = {
      searchTerm,
      dataset,
      timestamp: Date.now(),
      humanReadable
    }

    history.unshift(newItem)

    if (history.length > this.MAX_HISTORY_ITEMS) {
      history.pop()
    }

    LocalStorage.set(this.STORAGE_KEY, history)
  }

  static clearHistory(): void {
    LocalStorage.remove(this.STORAGE_KEY)
  }

  static formatDate(timestamp: number): string {
    return new Date(timestamp).toLocaleDateString('en-US', {
      month: 'short',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
      hour12: false
    })
  }
}

================
File: src/types/history.ts
================
export interface SearchHistoryItem {
  searchTerm: string;
  dataset: string;
  timestamp: number;
  humanReadable?: string;
}

================
File: src/types/index.ts
================
// src/types/index.ts
export interface Triple {
  subject: string;
  predicate: string;
  object: string;
}

export interface ModelResponse {
  short_ans: string;
  full_ans: string;
}

export interface Question {
  question: string;
  score: number;
}

export interface Analysis {
  error_category: string;
  error_detail: string;
  category: string;
  stratum: string;
  topic: string;
}

// export interface VerificationData {
//     subject: string;
//     predicate: string;
//     object: string;
//     human_readable: string;
//     questions: Question[];
//     google_pages: Array<{
//         url: string;
//         html: string;
//     }>;
//     selected_docs: Array<{
//         file_id: string;
//     }>;
//     responses: Record<string, ModelResponse>;
//     need_tiebreaker: string;
//     tiebreakers_responses: Record<string, ModelResponse>;
//     final_decision: string;
//     actual_decision: string;
//     analysis: Analysis;
// }

export interface User {
  id: number;
  name: string;
  avatar: string;
}

export interface FeedbackResponse {
  id: number;
  user: User;
  feedback: 'agree' | 'disagree' | 'uncertain';
  comment: string;
  timestamp: string;
}

// export interface FeedbackStats {
//     agree: number;
//     disagree: number;
//     uncertain: number;
//     total: number;
// }

export interface VerificationStep {
  loading: string;
  content: string;
  action: () => Promise<void>;
}

export interface LoadingState {
  tripleProcessing: boolean;
  humanReadable: boolean;
  questions: boolean;
  googlePages: boolean;
  selectedDocs: boolean;
  llmSubmission: boolean;
  tieBreaker: boolean;
  finalDecision: boolean;
}

export interface VerificationData {
  subject: string;
  predicate: string;
  object: string;
  human_readable: string;
  questions: Array<{
    question: string;
    score: string;
  }>;
  google_pages: Array<{
    url: string;
    html: string;
  }>;
  selected_docs: Array<{
    file_id: string;
  }>;
  final_question: string;
  responses: {
    [key: string]: {
      short_ans: number;
      full_ans: string;
    };
  };
  need_tiebreaker: string;
  tiebreakers_responses: {
    [key: string]: {
      short_ans: string;
      full_ans: string;
    };
  };
  final_decision: string;
  actual_decision: string;
  analysis: {
    error_category: string;
    error_detail: string;
    category: string;
    stratum: string;
    topic: string;
  };
}

export type FeedbackType = 'agree' | 'disagree' | 'uncertain';

export interface FeedbackUser {
  id: number;
  username: string;
  email: string;
  avatar: string;
}

export interface Feedback {
  id: number;
  user: FeedbackUser;
  feedback: FeedbackType;
  comment: string;
  created_at: string;
  upvotes: number;
  downvotes: number;
  isPublic: boolean;
  hasUserVoted?: {
    upvoted: boolean;
    downvoted: boolean;
  };
}

export interface FeedbackStats {
  agree: number;
  disagree: number;
  uncertain: number;
  total: number;
}

export interface FeedbackSubmission {
  searchTerm: string;
  dataset: string;
  feedback: FeedbackType;
  comment: string;
  isPublic: boolean;
}

================
File: src/types/search.ts
================
export interface Triple {
  subject: string;
  predicate: string;
  object: string;
}

export interface SearchMatch {
  text: string;
  dataset: string;
  identifier: string;
  triple: Triple;
}

================
File: src/types/verification.ts
================
// types/verification.ts
export interface VerificationData {
  subject: string;
  predicate: string;
  object: string;
  human_readable: string;
  questions: Question[];
  google_pages: GooglePage[];
  selected_docs: SelectedDoc[];
  responses: Record<string, ModelResponse>;
  need_tiebreaker: boolean;
  tiebreakers_responses:Record<string, ModelResponse>;
  final_decision: string;
  analysis: Analysis;
}


export interface Question {
  question: string;
  score: number;
}

export interface GooglePage {
  url: string;
  html: string;
}

export interface SelectedDoc {
  file_id: string;
}

export interface ModelResponse {
  short_ans: number;
  full_ans: string;
}

export interface Analysis {
  error_category: string;
  error_detail: string;
  category: string;
  stratum: string;
  topic: string;
  error_reason?: string;
}

export interface ProcessStep {
  id: string;
  title: string;
  description?: string;
  prompt?: string;
  examples?: { input: string; output: string }[];
}

================
File: src/utils/calculateModelStats.ts
================
import { ModelResponse } from '../types/verification'

export const calculateModelStats = (responses: Record<string, ModelResponse>) => {
  const counts = {
    verified: 0,
    notVerified: 0,
    noAnswer: 0
  }

  Object.values(responses).forEach(response => {
    const ans = response.short_ans
    if (ans === 1) counts.verified++
    else if (ans === 0) counts.notVerified++
    else counts.noAnswer++
  })

  const totalResponses = Object.keys(responses).length - counts.noAnswer

  return {
    ...counts,
    verifiedRate: totalResponses > 0 ? (counts.verified / totalResponses * 100) : 0,
    notVerifiedRate: totalResponses > 0 ? (counts.notVerified / totalResponses * 100) : 0
  }
}

================
File: src/utils/promptGenerators.ts
================
import { VerificationData } from '../types/verification'

export const generateQuestionPromptContent = (data: VerificationData): string => {
  return `You are an intelligent system with access to a vast amount of information. I will provide you with a knowledge graph in the form of triples (subject, predicate, object). 

Your task is to generate ten questions based on the knowledge graph. The questions should assess understanding and insight into the information presented in the graph. Provide the output in JSON format, with each question having a unique identifier.

Instructions:
    1. Analyze the provided knowledge graph.
    2. Generate ten questions that are relevant to the information in the knowledge graph.
    3. Provide the questions in JSON format, each with a unique identifier.

Examples:
Albert Einstein bornIn Ulm
Expected Response:
    {
        "questions": [
          {"id": 1, "question": "Where was Albert Einstein born?"},
          {"id": 2, "question": "What is Albert Einstein known for?"},
          {"id": 3, "question": "In what year was the Theory of Relativity published?"},
          {"id": 4, "question": "Where did Albert Einstein work?"},
          {"id": 5, "question": "What prestigious award did Albert Einstein win?"},
          {"id": 6, "question": "Which theory is associated with Albert Einstein?"},
          {"id": 7, "question": "Which university did Albert Einstein work at?"},
          {"id": 8, "question": "What did Albert Einstein receive the Nobel Prize in?"},
          {"id": 9, "question": "In what field did Albert Einstein win a Nobel Prize?"},
          {"id": 10, "question": "Name the city where Albert Einstein was born."}
        ]
    }

Current Input:
Subject: ${data.subject}
Predicate: ${data.predicate}
Object: ${data.object}

Human Readable: ${data.human_readable}

The output should be provided in JSON format with the following structure:
{
    "questions": [
        {"id": number, "question": string}
    ]
}`
}

export const generateHumanReadablePrompt = (data: VerificationData): string => {
  return `Task Description: Convert a knowledge graph triple into a meaningful human-readable sentence.

Instructions: Given a subject, predicate, and object from a knowledge graph, form a grammatically correct and meaningful sentence that conveys the relationship between them.

Examples:
Input:
Subject: Alexander_III_of_Russia
Predicate: isMarriedTo
Object: Maria_Feodorovna__Dagmar_of_Denmark_
Output: {"output": "Alexander III of Russia is married to Maria Feodorovna, also known as Dagmar of Denmark."}

Subject: Quentin_Tarantino
Predicate: produced
Object: From_Dusk_till_Dawn
Output: {"output": "Quentin Tarantino produced the film From Dusk till Dawn."}

Do the following:
Input:
Subject: ${data.subject}
Predicate: ${data.predicate}
Object: ${data.object}

The output should be a JSON object with the key "output" and the value as the sentence. The sentence should be human-readable and grammatically correct.
    `

}

================
File: src/utils/storage.ts
================
// utils/storage.ts
export class LocalStorage {
  static get<T>(key: string, defaultValue: T): T {
    try {
      const item = localStorage.getItem(key)
      return item ? JSON.parse(item) : defaultValue
    } catch {
      return defaultValue
    }
  }

  static set<T>(key: string, value: T): void {
    try {
      localStorage.setItem(key, JSON.stringify(value))
    } catch (error) {
      console.error('Error saving to localStorage:', error)
    }
  }

  static remove(key: string): void {
    try {
      localStorage.removeItem(key)
    } catch (error) {
      console.error('Error removing from localStorage:', error)
    }
  }
}

================
File: src/App.tsx
================
// src/App.tsx
import React from 'react'
import { BrowserRouter, Route, Routes } from 'react-router-dom'
import { HomePage } from './pages/HomePage'
import { ResultsPage } from './pages/ResultsPage'
import { AuthProvider } from './contexts/AuthContext'

function App() {
  return (
    <AuthProvider>
      <BrowserRouter>
        <Routes>
          <Route path="/" element={<HomePage />} />
          <Route path="/results" element={<ResultsPage />} />
        </Routes>
      </BrowserRouter>
    </AuthProvider>
  )
}

export default App

================
File: src/config.ts
================
// src/config.ts
import { FeedbackType } from './types'

export const API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:8000'

export const AUTH_PROVIDERS = {
  GOOGLE: 'google',
  ORCID: 'orcid'
} as const

export const FEEDBACK_TYPES: Record<string, FeedbackType> = {
  Agree: 'agree',
  Uncertain: 'uncertain',
  Disagree: 'disagree'
} as const

export const EMOJIS: Record<FeedbackType, string> = {
  agree: '👍',
  disagree: '👎',
  uncertain: '😐'
} as const

================
File: src/index.css
================
/* src/index.css */
@tailwind base;
@tailwind components;
@tailwind utilities;

.loading-text {
    @apply text-blue-600 font-medium animate-blink hidden p-2 bg-blue-50 rounded-md mb-2;
}

.content-section {
    @apply opacity-0 transform translate-y-2.5 transition-all duration-500 hidden mb-4;
}

.content-section.visible {
    @apply opacity-100 translate-y-0 block;
}

.chat-container {
    @apply h-[calc(100vh-200px)] overflow-y-auto p-4 scroll-smooth;
}

.loading-container {
    @apply sticky top-0 bg-white p-4 border-b border-gray-200 z-10 shadow-md;
}

/* Add to src/index.css */
.verification-step {
    @apply opacity-0 transform translate-y-4 transition-all duration-500 ease-in-out;
}

.verification-step.visible {
    @apply opacity-100 translate-y-0;
}

.history-sidebar-mobile {
    @apply fixed inset-y-0 left-0 z-30 w-64 bg-white shadow-lg transform transition-transform duration-300 ease-in-out;
}

@media (min-width: 768px) {
    .history-sidebar-mobile {
        @apply relative transform-none shadow-none;
    }
}

@keyframes slideIn {
    from {
        opacity: 0;
        transform: translateY(20px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

@keyframes fadeIn {
    from {
        opacity: 0;
    }
    to {
        opacity: 1;
    }
}

.feedback-popup {
    animation: slideIn 0.3s ease-out;
}

.feedback-item {
    animation: fadeIn 0.3s ease-out;
}

/* Vote button pulse animation */
@keyframes pulse {
    0% {
        transform: scale(1);
    }
    50% {
        transform: scale(1.1);
    }
    100% {
        transform: scale(1);
    }
}

.vote-button:active {
    animation: pulse 0.2s ease-out;
}

/* Loading spinner animation */
@keyframes spin {
    from {
        transform: rotate(0deg);
    }
    to {
        transform: rotate(360deg);
    }
}

.loading-spinner {
    animation: spin 1s linear infinite;
}

================
File: src/index.tsx
================
// src/index.tsx
import React from 'react'
import ReactDOM from 'react-dom/client'
import './index.css'
import App from './App'

const root = ReactDOM.createRoot(
  document.getElementById('root') as HTMLElement
)
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
)

================
File: src/logo.svg
================
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 841.9 595.3">
    <g fill="#61DAFB">
        <path d="M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z"/>
        <circle cx="420.9" cy="296.5" r="45.7"/>
        <path d="M520.5 78.1z"/>
    </g>
</svg>

================
File: src/react-app-env.d.ts
================
/// <reference types="react-scripts" />

================
File: src/reportWebVitals.ts
================
import { ReportHandler } from 'web-vitals'

const reportWebVitals = (onPerfEntry?: ReportHandler) => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry)
      getFID(onPerfEntry)
      getFCP(onPerfEntry)
      getLCP(onPerfEntry)
      getTTFB(onPerfEntry)
    })
  }
}

export default reportWebVitals

================
File: src/setupTests.ts
================
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom'

================
File: .eslintrc
================
{
  "root": true,
  "env": {
    "node": true
  },
  "plugins": ["prettier"],
  "extends": [
    "eslint:recommended",
    "plugin:import/recommended",
    "plugin:import/typescript",
    "plugin:@typescript-eslint/eslint-recommended",
    "plugin:@typescript-eslint/recommended",
    "prettier"
  ],
  "rules": {
    "import/no-unresolved": "off",
    "import/extensions": ["error", "ignorePackages", { "js": "never", "jsx": "never", "ts": "never", "tsx": "never" }]
  }
}

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# production
/build

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local

npm-debug.log*
yarn-debug.log*
yarn-error.log*

================
File: .prettierrc.json
================
{
  "semi": false,
  "singleQuote": true,
  "tabWidth": 2,
  "useTabs": false,
  "endOfLine": "auto",
  "printWidth": 80,
  "arrowParens": "avoid",
  "proseWrap": "always",
  "htmlWhitespaceSensitivity": "strict",
  "jsxBracketSameLine": false,
  "bracketSpacing": true,
  "insertPragma": false,
  "requirePragma": false,
  "quoteProps": "as-needed",
  "trailingComma": "none",
  "eslintIntegration": true,
  "parser": "babel",
  "jsxSingleQuote": false,
  "vueIndentScriptAndStyle": false
}

================
File: package.json
================
{
  "homepage": ".",
  "name": "knowledge-graph-verifier",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@heroicons/react": "^2.2.0",
    "@tailwindcss/typography": "^0.5.15",
    "@testing-library/jest-dom": "^5.17.0",
    "@testing-library/react": "^13.4.0",
    "@testing-library/user-event": "^13.5.0",
    "@types/jest": "^27.5.2",
    "@types/react": "^18.3.12",
    "@types/react-dom": "^18.3.1",
    "@types/react-router-dom": "^5.3.3",
    "axios": "^1.7.8",
    "flowbite": "^2.5.2",
    "flowbite-react": "^0.10.2",
    "lucide-react": "^0.462.0",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-router-dom": "^7.0.1",
    "react-scripts": "5.0.1",
    "typescript": "^4.9.5",
    "web-vitals": "^2.1.4"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "GENERATE_SOURCEMAP=false react-scripts build --no-cache",
    "test": "react-scripts test",
    "eject": "react-scripts eject",
    "deploy": "npm run build && gh-pages -d build"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "devDependencies": {
    "@eslint/js": "^9.15.0",
    "@types/node": "^22.10.0",
    "autoprefixer": "^10.4.20",
    "eslint": "^8.57.1",
    "eslint-config-prettier": "^9.1.0",
    "eslint-plugin-import": "^2.31.0",
    "eslint-plugin-jsx-a11y": "^6.10.2",
    "eslint-plugin-prettier": "^5.2.1",
    "eslint-plugin-react": "^7.37.2",
    "eslint-plugin-react-hooks": "^4.6.2",
    "gh-pages": "^6.2.0",
    "globals": "^15.12.0",
    "postcss": "^8.4.49",
    "prettier": "^3.4.1",
    "tailwindcss": "^3.4.15",
    "typescript-eslint": "^8.16.0"
  }
}

================
File: postcss.config.js
================
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {}
  }
}

================
File: react-project-structure.json
================
[
  {"type":"directory","name":".","contents":[
    {"type":"file","name":"README.md"},
    {"type":"directory","name":"build","contents":[
      {"type":"file","name":"asset-manifest.json"},
      {"type":"directory","name":"data","contents":[
        {"type":"directory","name":"html","contents":[
          {"type":"file","name":"yago_5_0.html"},
          {"type":"file","name":"yago_5_1.html"},
          {"type":"file","name":"yago_5_2.html"},
          {"type":"file","name":"yago_5_3.html"}
        ]},
        {"type":"directory","name":"txt","contents":[
          {"type":"file","name":"yago_5_106.txt"},
          {"type":"file","name":"yago_5_113.txt"},
          {"type":"file","name":"yago_5_37.txt"},
          {"type":"file","name":"yago_5_39.txt"},
          {"type":"file","name":"yago_5_4.txt"},
          {"type":"file","name":"yago_5_40.txt"},
          {"type":"file","name":"yago_5_61.txt"},
          {"type":"file","name":"yago_5_73.txt"},
          {"type":"file","name":"yago_5_80.txt"},
          {"type":"file","name":"yago_5_92.txt"}
        ]},
        {"type":"directory","name":"yago","contents":[
          {"type":"file","name":"22.json"},
          {"type":"file","name":"5.json"}
        ]},
        {"type":"file","name":"yago.json"}
      ]},
      {"type":"file","name":"favicon.ico"},
      {"type":"directory","name":"images","contents":[
        {"type":"file","name":"comics.png"},
        {"type":"file","name":"dei.png"},
        {"type":"file","name":"iiiahub.png"},
        {"type":"file","name":"unipd.png"}
      ]},
      {"type":"file","name":"index.html"},
      {"type":"file","name":"logo192.png"},
      {"type":"file","name":"logo512.png"},
      {"type":"file","name":"manifest.json"},
      {"type":"file","name":"robots.txt"},
      {"type":"directory","name":"static","contents":[
        {"type":"directory","name":"css","contents":[
          {"type":"file","name":"main.3c8d858c.css"}
        ]},
        {"type":"file","name":"google-icon.svg"},
        {"type":"directory","name":"js","contents":[
          {"type":"file","name":"main.5882d3a9.js"},
          {"type":"file","name":"main.5882d3a9.js.LICENSE.txt"}
        ]},
        {"type":"file","name":"orcid-icon.svg"}
      ]}
    ]},
    {"type":"file","name":"new_project.json"},
    {"type":"file","name":"package-lock.json"},
    {"type":"file","name":"package.json"},
    {"type":"file","name":"postcss.config.js"},
    {"type":"directory","name":"public","contents":[
      {"type":"directory","name":"data","contents":[
        {"type":"directory","name":"html","contents":[
          {"type":"file","name":"yago_5_0.html"},
          {"type":"file","name":"yago_5_1.html"},
          {"type":"file","name":"yago_5_2.html"},
          {"type":"file","name":"yago_5_3.html"}
        ]},
        {"type":"directory","name":"txt","contents":[
          {"type":"file","name":"yago_5_106.txt"},
          {"type":"file","name":"yago_5_113.txt"},
          {"type":"file","name":"yago_5_37.txt"},
          {"type":"file","name":"yago_5_39.txt"},
          {"type":"file","name":"yago_5_4.txt"},
          {"type":"file","name":"yago_5_40.txt"},
          {"type":"file","name":"yago_5_61.txt"},
          {"type":"file","name":"yago_5_73.txt"},
          {"type":"file","name":"yago_5_80.txt"},
          {"type":"file","name":"yago_5_92.txt"}
        ]},
        {"type":"directory","name":"yago","contents":[
          {"type":"file","name":"22.json"},
          {"type":"file","name":"5.json"}
        ]},
        {"type":"file","name":"yago.json"}
      ]},
      {"type":"file","name":"favicon.ico"},
      {"type":"directory","name":"images","contents":[
        {"type":"file","name":"comics.png"},
        {"type":"file","name":"dei.png"},
        {"type":"file","name":"iiiahub.png"},
        {"type":"file","name":"unipd.png"}
      ]},
      {"type":"file","name":"index.html"},
      {"type":"file","name":"logo192.png"},
      {"type":"file","name":"logo512.png"},
      {"type":"file","name":"manifest.json"},
      {"type":"file","name":"robots.txt"},
      {"type":"directory","name":"static","contents":[
        {"type":"file","name":"google-icon.svg"},
        {"type":"file","name":"orcid-icon.svg"}
      ]}
    ]},
    {"type":"directory","name":"src","contents":[
      {"type":"file","name":"App.tsx"},
      {"type":"directory","name":"components","contents":[
        {"type":"file","name":"AuthCallback.tsx"},
        {"type":"directory","name":"layout","contents":[
          {"type":"file","name":"Footer.tsx"},
          {"type":"file","name":"Header.tsx"}
        ]},
        {"type":"directory","name":"search","contents":[
          {"type":"file","name":"SearchBar.tsx"}
        ]},
        {"type":"directory","name":"verification","contents":[
          {"type":"file","name":"FeedbackSection.tsx"},
          {"type":"file","name":"GoogleResultsSection.tsx"},
          {"type":"file","name":"History.ts"},
          {"type":"file","name":"HistorySidebar.tsx"},
          {"type":"file","name":"ModelResponse.tsx"},
          {"type":"file","name":"VerificationProcess.tsx"}
        ]}
      ]},
      {"type":"file","name":"config.ts"},
      {"type":"directory","name":"contexts","contents":[
        {"type":"file","name":"AuthContext.tsx"}
      ]},
      {"type":"file","name":"index.css"},
      {"type":"file","name":"index.tsx"},
      {"type":"file","name":"logo.svg"},
      {"type":"directory","name":"pages","contents":[
        {"type":"file","name":"HomePage.tsx"},
        {"type":"file","name":"ResultsPage.tsx"}
      ]},
      {"type":"file","name":"react-app-env.d.ts"},
      {"type":"file","name":"reportWebVitals.ts"},
      {"type":"directory","name":"services","contents":[
        {"type":"file","name":"auth.ts"},
        {"type":"file","name":"feedbackService.ts"}
      ]},
      {"type":"file","name":"setupTests.ts"},
      {"type":"directory","name":"types","contents":[
        {"type":"file","name":"index.ts"}
      ]}
    ]},
    {"type":"file","name":"tailwind.config.js"},
    {"type":"file","name":"tsconfig.json"}
  ]}
,
  {"type":"report","directories":26,"files":93}
]

================
File: README.md
================
# Getting Started with Create React App

This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).

## Available Scripts

In the project directory, you can run:

### `npm start`

Runs the app in the development mode.\
Open [http://localhost:3000](http://localhost:3000) to view it in the browser.

The page will reload if you make edits.\
You will also see any lint errors in the console.

### `npm test`

Launches the test runner in the interactive watch mode.\
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.

### `npm run build`

Builds the app for production to the `build` folder.\
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.\
Your app is ready to be deployed!

See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.

### `npm run eject`

**Note: this is a one-way operation. Once you `eject`, you can’t go back!**

If you aren’t satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you’re on your own.

You don’t have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn’t feel obligated to use this feature. However we understand that this tool wouldn’t be useful if you couldn’t customize it when you are ready for it.

## Learn More

You can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).

To learn React, check out the [React documentation](https://reactjs.org/).
repomix --ignore "**/*.log,data/,build/,node_modules/,public/,.idea,.venv"

================
File: repomix.config.json
================
{
  "output": {
    "filePath": "Frontend Project.txt",
    "style": "plain",
    "removeComments": false,
    "removeEmptyLines": false,
    "topFilesLength": 5,
    "showLineNumbers": false
  },
  "include": [],
  "ignore": {
    "useGitignore": true,
    "useDefaultPatterns": true,
    "customPatterns": ["src/data/yago.ts", "data/", "node_modules/", "public/", "build/", "dist/"]
  },
  "security": {
    "enableSecurityCheck": true
  }
}

================
File: tailwind.config.js
================
// tailwind.config.js
const flowbite = require('flowbite-react/tailwind')

module.exports = {
  content: ['./src/**/*.{js,jsx,ts,tsx}', flowbite.content()],
  theme: {
    extend: {
      animation: {
        blink: 'blink 1.5s infinite',
        fadeIn: 'fadeIn 0.5s ease-in-out'
      },
      keyframes: {
        blink: {
          '0%, 100%': { opacity: '1' },
          '50%': { opacity: '0' }
        },
        fadeIn: {
          from: {
            opacity: '0',
            transform: 'translateY(10px)'
          },
          to: {
            opacity: '1',
            transform: 'translateY(0)'
          }
        }
      }
    }
  },
  plugins: [require('@tailwindcss/typography'), flowbite.plugin()]
}

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "target": "es6",
    "lib": [
      "dom",
      "dom.iterable",
      "esnext"
    ],
    "allowJs": true,
    "skipLibCheck": true,
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noFallthroughCasesInSwitch": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx"
  },
  "include": [
    "src"
  ]
}
